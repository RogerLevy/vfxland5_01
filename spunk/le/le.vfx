\ ------------------------------------------------------------------------------
\ Spunk Level Editor
\ ------------------------------------------------------------------------------
private

variable life
create mousex 0 , 0 , here cell- constant mousey
variable mbuttons
variable t
variable t0
create agrids /screen #rooms * allot&erase \ actor grids
create pgrids /screen #rooms * allot&erase \ priority grids
variable actormode
variable c \ actor class 
create marks #rooms allot&erase
variable prio
create cb-t /screen allot 
create cb-a /screen allot 
create cb-p /screen allot 

: mark! room# @ marks + c! ;
: mark@ room# @ marks + c@ ;
: ag room# @ /screen * agrids + ;
: pg room# @ /screen * pgrids + ;
: loc  actormode @ if ag else bg0 then spot ;
: tube ( - a ) actormode @ if c else t then ;
: mouse  mousex 2@ ;
: quantize  2dup gap dup 2mod 2- ;
: colrow  mouse gap dup 2/ ;
: lb  mbuttons @ 1 and 0<> ;
: rb  mbuttons @ 2 and 0<> ;
    
\ ------------------------------------------------------------------------------

: .acell ( col row - )
    | j i |
    i j ag spot @ ?dup if
        cr 
        i j pg spot @ ?dup if . ." priority " then
        i . j . ." att " body> >name count type ."  *[[ ]]"
    then ;

: .ag ( - )
    tmh for tmw for i j .acell loop loop ;

: priority  prio ! ;

: *[[ ( class - )
    at@ gap dup 2/ | row col class |  class col row ag spot !
    prio @ ?dup if col row pg spot !  0 prio ! then ;
    
: ]] ; 

: middle  bmp @ bmpwh 2 2 2/ ;
: sprite  middle 2negate +at  bmp @ put  middle +at ;

: draw-class ( class - )
    ?dup -exit  dummy [[ cla !  dummy init  sprite ]] ;

: actorgrid ( - )
    tmh for tmw for
        i j ag spot @ ?dup if  i j att  draw-class  then
    loop loop ;

: save-ag ( - )
    s[ .ag s] room.scn$ write ;

: clear-ag ( - )
    ag /screen erase  pg /screen erase ;
    
: load-ag ( - )
    context @  le~  clear-ag  room.scn$ ?included  context ! ; 

\ ------------------------------------------------------------------------------

: w?  w@ . ;

: tcursor ( - )
    -1 -1 +at  at@f  pen 2@ gap dup 2+ 2s>f 0e 0e 0e 1e
    al_draw_filled_rectangle
    t @ t0 @ + put
    life @ 2 mod if -8 -8 +at s[ t w? s] print then ;

: acursor ( - )
    gap 2 / 1 - dup +at  
    life @ 2 mod if
        s[ c @ .name s] print 
    else
        c @ draw-class
    then ;

: ?room#  debug @ -exit  0 0 at s[ room# ? s] print ;

: lay-with  pile @ >r pile ! lay r> pile ! ;

: ui
    0 0 at  bg0 t0 @ lay-with
    actormode @ if
        actorgrid
        ?room#
        mouse quantize at  acursor
    else
        \ life @ 2 mod 0=  if actorgrid then
        ?room#
        mouse quantize at  tcursor
    then
    life @ 2 mod 0= if  0 0 at  mark@ if s" modified" print then then ;

\ ------------------------------------------------------------------------------

: t+! ( n - ) shift? if 8 * then t @ + 255 and t ! ;
: paint ( - ) tube @ colrow loc !  1 mark! ;
: eyedrop ( - ) colrow loc @ tube ! ;
: clear ( - ) bg0 /screen erase clear-ag  1 mark! ;

: copy ( - )
    bg0 cb-t /screen move 
    ag  cb-a /screen move 
    pg  cb-p /screen move ;

: paste ( - )
    cb-t bg0 /screen move 
    cb-a ag  /screen move 
    cb-p pg  /screen move
    1 mark! ;

: cut ( - )   copy clear ;

: save-room
    bg0 /screen room.dat$ write
    cr ." Saved to " room.dat$ type
    save-ag
    0 mark! ;

: save
    room# @ 
    #rooms for i room mark@ if save-room then loop
    room ;
    
: @roombase
    bl parse s" maps\" >datadir f" %s%s" roombase$ place ;

: saveas ( - <path> )
    @roombase save ;

: (load)
    room.dat$ file-exists? not if clear-ag exit then
    bg0 /screen room.dat$ read
    load-ag ;

: load ( - <path> )
    @roombase (load) ;

: dab ( - <class> )
    >in @ bl word swap >in ! find nip not if 
        >in @  update  >in !
    then
    bl parse evaluate c !  actormode on ;

\ ------------------------------------------------------------------------------

: logic
    begin event? while
        ALLEGRO_EVENT_MOUSE_AXES happened? if
            the-mouse 2s>p +m inverse 2p*m -m 2p>s mousex 2!
            actormode @ not if
                the-wheel ?dup if t+! then
            then
        then
        ALLEGRO_EVENT_MOUSE_BUTTON_DOWN happened? if
            mbuttons @ the-mbutton or mbuttons !
        then
        ALLEGRO_EVENT_MOUSE_BUTTON_UP happened? if
            mbuttons @ the-mbutton invert and mbuttons !
        then
        ALLEGRO_EVENT_KEY_DOWN happened? if
            the-key <s> = ctrl? and if save then
            the-key <a> = if actormode @ not actormode ! then
            the-key <x> = ctrl? and if cut then
            the-key <c> = ctrl? and if copy then
            the-key <v> = ctrl? and if paste then
            the-key <z> = ctrl? and if revert then
        then
        ALLEGRO_EVENT_KEY_CHAR happened? if
            the-key <left> = if -1 shift? if 10 * then +room then
            the-key <right> = if 1 shift? if 10 * then +room then
            the-key <up> = if -100 +room then
            the-key <down> = if 100 +room then
        then
    repeat
    
    lb if paint then
    rb if eyedrop then
;

: revert
    revert-bg load-ag ;

: revert-all
    room# @ #rooms for i room revert loop room ;

: (le)
    le~  show>  logic  ui  1 life +! ;

\ ------------------------------------------------------------------------------
public

\ : re  (le) ;
: le  revert-all (le) ;
\ : le (le) ;

\ : edit ( - <tileset> )
\     ' execute t0 ! ;

\ revert-all  
bg.ts baseid@ t0 !