\ ------------------------------------------------------------------------------
\ spunk
\ Non-scrolling 2D open world game framework
\ ------------------------------------------------------------------------------
 
\ =============================================================================
\ Variables
\ =============================================================================

1024 constant #rooms
tmw tmh * cells constant /screen
|| : ?flip  4 rnd 24 << or ;
|| : randoms,  for 256 rnd ?flip , loop ;
create mram /screen cell/ #rooms * randoms,
mram value bg0
variable room#

\ =============================================================================
\ Low-level stuff
\ =============================================================================

: roombase$  room# @ s" map\room" >datadir f" %s%03n" >pad count ;
: room-datfile  roombase$ f" %s.dat" ;
: room-scnfile  roombase$ f" %s.vfx" ;
: screen  1023 and /screen * mram + ;

\ =============================================================================
\ Stashing actors between rooms
\ =============================================================================

class: actor
    prop r#  \ the room each actor was in
             \ -1 = persist
             \ -2 = discard
    prop a#  \ we also try to restore the ordering using actor#
class;  

|| : belong?
    r# @ room# @ =   r# @ -1 = or ;

: unstashed ( actor - actor' )
    as>
        belong? -exit
        a# @ priority
        *actor 
        me over /actor move
        en off ;

: unstash ( actor - )
    unstashed drop ;

: stashed ( actor - actor' )
    as>
        r# @ -1 <> if room# @ r# ! then
        me actor# a# !   *temp    me over /actor move   me unload ;

: stash ( actor - )
    stashed drop ;

: throwaway ( - )
    -2 r# ! ;

timer :: init ( - )
    throwaway ;

: persist ( - )
    -1 r# ! ;

: stow ( - )
    actives>   r# @ -2 = if me unload else me stash then ;

: takeout ( - )
    temps>   me unstash ;

borrow scene/ actor-instance
|| : temp-instance ( class - actor )
    actor-instance stashed ;

: load&stow ( scene - )
    \ load actors from disk to temps
    as> des> ['] into-me desbin+  ['] temp-instance desmulti+ ;

\ =============================================================================
\ Room control
\ =============================================================================

variable load-room-chain

: room ( n - ) 1023 and room# ! room# @ screen to bg0 ;
: +room ( n - ) room# @ + room ;

: warp ( n - )
    1023 and
    cr ." WARPING TO ROOM " dup .
    stow  room  takeout
    load-room-chain do-chain ;

: +warp ( n - )
    room# @ + 1000 + 1000 mod warp ;

: ?read  2dup file-exists? if read else 2drop then ;

: revert-bg ( - )
    bg0 /screen room-datfile ?read ;

: revert ( - )
    revert-bg
    clear-stage
    room-scnfile ?included
    load-room-chain do-chain ;

: load-world ( - )
    clear-temps #rooms for i room revert stow loop ;

\ =============================================================================
\ Read/write the background
\ =============================================================================

: colrow  ( - c r ) x 2@ `` xy>cr ;
: +tile@  ( c r - n ) colrow 2+ `` bg0 ` spot c@ ;
: +tile!  ( n c r - ) colrow 2+ `` bg0 ` spot c! ;
: ftile@  ( f: c r - n ) 2f>p xy>cr `` bg0 ` spot c@ ;
: ftile!  ( n f: c r - ) 2f>p xy>cr `` bg0 ` spot c! ;

\ =============================================================================
\ Rendering
\ =============================================================================

\ A word could change bg0 and we call BG multiple times
\ to draw multiple layers.
\ Ex:
\ variable layer#
\ 2 /screen array layer-array
\ : layer dup layer# ! layer-array [] to bg0 ;
\ : layers 0 layer bg 1 layer bg ;
: bg  0 0 at bg0 lay ;
