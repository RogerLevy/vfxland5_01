\ words by Claude AI

validations dup @ swap off

var r \ radius
var m \ mass

: collision-force ( src-obj dest-obj -- x-force. y-force. )
    {: obj2 obj1 | f: dx f: dy f: distance f: overlap f: force-magnitude
                  f: obj1-radius f: obj2-radius f: total-radius f: obj2-speed :}

    \ Get object radii
    obj1 's r @ p>f to obj1-radius
    obj2 's r @ p>f to obj2-radius
    obj1-radius obj2-radius f+ to total-radius

    \ Calculate distance between objects
    obj1 's x 2@ obj2 's x 2@ 2- 2p>f to dy to dx
    dx dx f* dy dy f* f+ fsqrt to distance

    \ Check if collision occurred
    distance total-radius f>= distance 0e f= or if
        0. 0. exit
    then

    \ Calculate overlap and obj2's speed
    total-radius distance f- to overlap
    obj2 's vx 2@ obj2 's vy 2@ 2- 2p>f
    fdup f* fswap fdup f* f+ fsqrt to obj2-speed

    \ Calculate force based on overlap and obj2's speed
    \ overlap obj2-speed f* obj2-radius f* 100e f* to force-magnitude

    \ Normalize direction and apply force (from obj2 to obj1)
    dx distance f/ f>p \ force-magnitude f*
    dy distance f/ f>p \ force-magnitude f*
    
;

: collision-force2 ( src-obj dest-obj -- x-force. y-force. )
    \ Accounts for velocity of both
    {: obj2 obj1 | f: dx f: dy f: distance f: overlap f: force-magnitude
                  f: obj1-radius f: obj2-radius f: total-radius
                  f: obj2-vx f: obj2-vy f: obj2-speed :}

    \ Get object radii
    obj1 's r @ p>f to obj1-radius
    obj2 's r @ p>f to obj2-radius
    obj1-radius obj2-radius f+ to total-radius

    \ Calculate distance between objects
    obj1 's x 2@ obj2 's x 2@ 2- 2p>f to dy to dx
    dx dx f* dy dy f* f+ fsqrt to distance

    \ Check if collision occurred
    distance total-radius f>= distance 0e f= or if
        0. 0. exit
    then

    \ Get obj2's velocity components
    obj2 's vx 2@ 2p>f to obj2-vy to obj2-vx
    obj2-vx obj2-vx f* obj2-vy obj2-vy f* f+ fsqrt to obj2-speed

    \ Calculate overlap and base force
    \ total-radius distance f- to overlap
    \ overlap obj2-speed f* obj2-radius f* 100e f* to force-magnitude

    \ Use obj2's velocity direction as the knockback direction
    obj2-speed 0e f= if
        \ If obj2 has no velocity, use position difference
        dy distance f/ \ force-magnitude f*
        dx distance f/ \ force-magnitude f*
    else
        \ Use obj2's velocity direction
        obj2-vx obj2-speed f/ \ force-magnitude f*
        obj2-vy obj2-speed f/ \ force-magnitude f*
    then
    2f>p
;

: collision-force3 ( src-obj dest-obj -- x-force. y-force. )
    \ Uses proper physics
    {: obj2 obj1 | f: dx f: dy f: distance
                  f: obj1-radius f: obj2-radius f: total-radius
                  f: obj1-vx f: obj1-vy f: obj2-vx f: obj2-vy
                  f: rel-vx f: rel-vy f: normal-x f: normal-y
                  f: relative-speed-normal f: impulse-magnitude
                  f: obj1-mass f: obj2-mass f: reduced-mass
                  f: acceleration :}

    \ Get object properties
    obj1 's r @ p>f to obj1-radius
    obj2 's r @ p>f to obj2-radius
    
    \ cr ." obj1-radius: " obj1-radius f.
    \ cr ." obj2-radius: " obj2-radius f.
    
    obj1-radius obj2-radius f+ to total-radius

    \ Calculate collision normal (from obj2 to obj1)
    obj1 's x 2@ obj2 's x 2@ 2- 2p>f to dy to dx
    dx dx f* dy dy f* f+ fsqrt to distance

    \ cr ." distance: " distance f. ." total-radius: " total-radius f.

    \ Check if collision occurred
    distance total-radius f>= distance 0e f= or if
        \ cr ." No collision detected"
        0. 0. exit
    then

    dx distance f/ to normal-x
    dy distance f/ to normal-y

    \ Get velocities
    obj1 's vx 2@ 2p>f to obj1-vy to obj1-vx
    obj2 's vx 2@ 2p>f to obj2-vy to obj2-vx

    \ cr ." obj1 vel: " obj1-vx f. obj1-vy f.
    \ cr ." obj2 vel: " obj2-vx f. obj2-vy f.

    \ Calculate relative velocity (obj1 - obj2)
    obj1-vx obj2-vx f- to rel-vx
    obj1-vy obj2-vy f- to rel-vy

    \ cr ." rel vel: " rel-vx f. rel-vy f.

    \ Calculate relative velocity along collision normal
    rel-vx normal-x f* rel-vy normal-y f* f+ to relative-speed-normal

    \ cr ." rel-speed-normal: " relative-speed-normal f.

    \ Use absolute value for collision response - we want to separate overlapping objects
    relative-speed-normal fabs to relative-speed-normal

    \ Get objects' masses
    obj1 's m @ p>f to obj1-mass
    obj2 's m @ p>f to obj2-mass

    \ cr ." obj1-mass: " obj1-mass f.
    \ cr ." obj2-mass: " obj2-mass f.

    \ Calculate reduced mass and impulse
    obj1-mass obj2-mass f* obj1-mass obj2-mass f+ f/ to reduced-mass
    reduced-mass relative-speed-normal f* 1.8e f* to impulse-magnitude

    \ cr ." impulse: " impulse-magnitude f.

    \ Apply impulse along normal, scaled by obj1's mass
    impulse-magnitude obj1-mass f/ to acceleration 
    normal-x acceleration f*
    normal-y acceleration f*
    
    \ cr ." final force: " fover f. fdup f.
    
    2f>p
;

: near? ( radius. x. y. x. y. - f )
    ( 2swap ) ;

: rhit? ( obj obj - f )
    over free? over free? or if 2drop 0 exit then
    {: o1 o2 | rd :}
    o1 's r @
    o2 's r @
    + to rd
    o1 pos@ o2 pos@ dist rd <= ;

0 value screen-bounced?

: screen-bounce-force ( obj damping. -- x-force. y-force. )
    {: obj d | f: obj-x f: obj-y f: obj-vx f: obj-vy f: obj-radius
              f: fx f: fy f: damping :}
        
    \ Get object properties
    obj 's x 2@ 2p>f to obj-y to obj-x
    obj 's vx 2@ 2p>f to obj-vy to obj-vx
    obj 's r @ p>f to obj-radius
    
    \ Initialize variables
    false to screen-bounced?
    d p>f to damping    
    0e to fx
    0e to fy
    
    \ Check left edge (x < radius)
    obj-x obj-radius f< if
        obj-vx 0e f< if  \ moving left
            obj-vx -2e f* damping f* to fx  \ reverse + damping
            true to screen-bounced?
        then
    then
    
    \ Check right edge (x > 320 - radius)
    obj-x 426e obj-radius f- f> if
        obj-vx 0e f> if  \ moving right
            obj-vx -2e f* damping f* to fx  \ reverse + damping
            true to screen-bounced?
        then
    then
    
    \ Check top edge (y < radius)
    obj-y obj-radius f< if
        obj-vy 0e f< if  \ moving up
            obj-vy -2e f* damping f* to fy  \ reverse + damping
            true to screen-bounced?
        then
    then
    
    \ Check bottom edge (y > 240 - radius)
    obj-y 320e obj-radius f- f> if
        obj-vy 0e f> if  \ moving down
            obj-vy -2e f* damping f* to fy  \ reverse + damping
            true to screen-bounced?
        then
    then
    
    fx f>p fy f>p
;

validations !