\ Common classifiers
trait: vessel%
    prop hp
    prop r \ radius
    prop m \ mass
    prop atk
    prop bounty
    prop firing-rate
trait;

trait: projectile%
    prop r \ radius
    prop firer
    prop atk
    prop a \ angle
    prop w \ width
    prop l \ length
trait;

trait: pickup%
    prop worth \ when non-zero, makes object a collectible source of energy
trait;

class: actor%
    works-with vessel%
    works-with projectile%
    works-with pickup%
    prop owner
class;

\ Common protocols
object% :: damage ( n - ) negate hp +! ;
object% :: kill ( - ) unload ;
: die  me kill ;

\ Common logic
: fired? ( firer actor - b )
    's firer @ = ;
 
\ Global variables
0 value player
variable energy  1000 energy !
variable automatic
variable charge

\ Input names
aka <start> <enter>

\ HUD
: hrs  gametime 360000000 m/ ;
: mins  gametime 60000000 m/ 60 mod ;
: secs  gametime 1000000 m/ 60 mod ;
: hud
    15 color
    \ 0 310 at s[ 480 8 / for space loop s] print    
    8 0 at
    charge @ energy @ f" %n   %n" print
    357 0 at secs mins hrs f" %02n:%02n:%02n" print ;

\ Common accessors
: radius r @ ;
: -radius radius negate ;

\ Scripting helpers
: pos@ 's x 2@ ;
: in? ( - f )
    x @ 0. r @ 2 * - gamew. r @ 2 * + within?
    y @ 0. r @ 2 * - gameh. r @ 2 * + within? and ;
: ?cull in? ?exit unload ;
: center-pos  160. 120. ;
: player-pos  player pos@ ;
: chance ( dividend divisor -- f ) rnd swap < ;

: backdrop  0 0 at backdrop.png put ;
: (blank) show> backdrop ;
: blank 'show @ (blank) 10 for frame loop 'show ! ;

: eval" ( - <string>" )
    \ Late-bound execution
    state @ if
        postpone (s") ", postpone evaluate
    else
        '"' parse >syspad evaluate
    then ; immediate

: from-top ( xratio. y. -- x. y. )
    >r gamew *  r> ;

: from-bottom ( xratio. y. -- x. y. )
    >r gamew *  r> gameh >. + ;

\ Music
bgm *bgm1* softice.ogg

