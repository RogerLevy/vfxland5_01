require scripts\orb.vfx

ship-v1.png 27 27 tileset ship.ts

actor-class ship%
var r
var m

aka flash-ctr n1 

: ?flash ( n - n )
    flash-ctr @ 2 / 5 mod 3 = if
        drop 15
    then
    flash-ctr @ 0> if -1 flash-ctr +! then ;

: !bmp
    ship.ts 0 ?flash tile bmp ! ;

: expel ( n - )
    for
        360. rnd dup
        me swap 20 vec from
        tri% one [[
            1. vec vx 2!
        ]]
    loop ;

: damage ( n - )
    dup expel 2 * 2 + flash-ctr ! ;
    
: hit-orb
    *snd-03*
    *snd-06*
\    *snd-08*
    you [[
        -1 energy +!
        
        \ small knockback
        you me collision-force3 0.5 0.5 2p* vx 2+!
        
        \ expel some tris
        5 damage
    ]]
    unload ;

: hit-tri
    *snd-07*
    1 energy +! unload ;

variable screen-bounced-counter 

: &screen
    me 0.9 screen-bounce-force vx 2+!
    screen-bounced? if
        *snd-08*
        5 screen-bounced-counter !
    then ;

: &objects
    actives>
        r @ -exit
        you me rhit? -exit
        me orb% is? if hit-orb exit then
        me tri% is? if hit-tri exit then ;

: collisions
    &screen &objects ;

: countdown
    dup @ 1 - 0 max swap ! ;
    
.3 control-variable spd
0.91 control-variable ine

: speed spd @ ;
: -speed speed negate ;

: controls
    screen-bounced-counter countdown
    screen-bounced-counter @ ?exit
    <a> held? if  -speed vx +!  then
    <d> held? if  speed vx +!  then
    <w> held? if  -speed vy +! then
    <s> held? if  speed vy +! then ;

: decel
    vx 2@ ine @ dup 2p* vx 2! ;

: physics
    decel collisions vx 2@ x 2+! ;

ship% :: init
    me to player
    ship.ts 0 tile bmp !
    13. r !
    10. m !
    ['] physics phys !
    act>
        !bmp controls ;
