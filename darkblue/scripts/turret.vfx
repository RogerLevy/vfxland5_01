\ Charging system:
\ - 5-level charge system (0-100 charge points) with escalating costs and power
\ - Charge delay prevents accidental charging - must hold key 8+ frames before charging begins
\ - Resource protection - charging caps automatically to preserve 10+ energy, prevents player suicide
\ - Immediate pea shots - initial key press fires weak shot, holding continues to charge
\ - Cancel-on-redirect - pressing new direction key cancels current charge and fires pea shot
\ - Level progression feedback - displays current charge level and caps with "CHARGING CAPPED!!!" message
\ - Dual firing modes - pea shooter (1 energy) vs charged shots (2-30 energy based on level)

require scripts\shot.vfx

actor-class turret%
var shooting
var shaking     \ 0 ~ 1.0
var aim
var atk

aka flash-ctr n1  \ for detecting ship recovery

turret.png 32 32 tileset turret.ts

: ang>bmp ( ts n. - n )
    360. umod dup >r
    5. p/ p>s 36 mod tile r> 180. >= if hv| then ;

: owner  n1 @ actor ;
: flicker  gamelife @ 1 and if drop 0 then ;

variable charging
\ variable charge  \ moved to common.vfx
variable level
variable level-ctr
variable charge-key

20 tweek charge-delay

2 cells array: dir-buttons
    \ key , angle ,
    <l> , 0. ,
    <.> , 45. ,
    <,> , 90. ,
    <k> , 90. ,
    <m> , 135. ,
    <n> , 135. ,
    <j> , 180. ,
    <u> , 225. ,
    <i> , 270. ,
    <o> , 315. ,    
array;

: dir-key@ ( n - n ) dir-buttons [] @ ;
: dir-ang@ ( n - ang. ) dir-buttons [] cell+ @ ;

: shoot ( power speed. class - )
    aim @ 
    owner 0 0 from swap ( aim. class ) one as>
        swap ( aim. speed. ) vec vx 2!
        atk !
        act> ?cull ;

: pea ( atk - ) *shoot* 8. shot% shoot ;
: fire-medium ( atk - ) *shoot* 8. missile1% shoot ;
: fire-large ( atk - ) *shoot* 8. missile2% shoot ;

3 cells array: charge-levels
    \ cost , atk , xt ,
    10  , 0 ,   ' drop , 
    20  , 5 ,   ' fire-medium , \ medium projectile, damages one enemy
    50  , 10 ,  ' fire-large , \ large projectile, damages one enemy
    \ 25  , 10 , ' pea , \ moving laser projectile, damages multiple enemies as its travels
    100 , 20 , ' fire-large , \ thin laser cannon, damages multiple enemies instantly
    150 , 40 , ' fire-large ,  \ wide laser cannon, damages multiple enemies instantly
array;

charge-levels #items cell array bars

: *bars ( - )
    charge-levels #items 1 do
        bar% one i bars [] !
    loop ;

: !bars ( - )
    owner 13 -13 owner 's vx 2@ 2p>s 2+ from
    bars #items 1 do
        i level @ <= if
            i bars [] @ [[ at@ 2s>p x 2! ]]
        else
            i bars [] @ [[ -9999. -9999. x 2! ]]
        then
        0 bar.png bmph 1 + negate +at 
    loop ;

: >cost  charge-levels [] @ ;
: >power  charge-levels [] cell+ @ ;
: >fire-xt  charge-levels [] cell+ cell+ @ ;
: @charge  charge @ ;

: @level ( - charge-level )
    0
    charge-levels #items for
        @charge 
        i >cost >= if
            drop i
        then
    loop ;

: .charge ( - )
    @charge . ;
    
: .level ( - )
    cr level @ . ;

: end-charge ( - )
    \ cr ." End charge"
    0 charge ! 0 level-ctr ! charging off -1 level ! ;

: fire ( level - )
    {: lvl :}
    lvl if  \ level 0 is after the charge delay
        lvl >cost 0 >cost - negate energy +!
        lvl >power lvl >fire-xt execute
    then
    end-charge ;

: ?+level ( - )
    @level level @ > if
        1 level +! 15 level-ctr !
    then ;

: can-afford? ( n - f )
    >cost energy @ swap - 10 >= ;

: +charge ( - )
    charge @ 1 + 150 min charge !
    @level can-afford? not if
        charge @ 1 - 0 max charge !
    then ;

: cancel-charge ( - )
    charging @ -exit
    end-charge ;

: ?charge ( - )
    automatic @ ?exit
    dir-buttons #items for
        i dir-key@ pressed? if 
            charging on
            -1 level ! 
            i dir-key@ charge-key !
        then
    loop 
    charging @ if
        owner 's flash-ctr @ 0 >= if  \ -1 = not flashing
            cancel-charge exit
        then
        charge-key @ letgo? if
\            @charge 0= if
\                end-charge
\                exit
\            then
            
            level @ fire
        else
            level-ctr @ 0= if
                +charge ?+level
            else
                -1 level-ctr +!
            then
        then
    then
    @charge 0 max 100 p/ shaking ! ;

: ?aim-auto ( - )
    dir-buttons #items for
        i dir-key@ held? if
            i dir-ang@ aim ! shooting on
        then
    loop ;

: ?aim-normal ( - )
    dir-buttons #items for
        i dir-key@ pressed? if 
            cancel-charge
            i dir-ang@ aim ! shooting on
        then
    loop ;

: ?aim ( - )
    automatic @ if ?aim-auto else ?aim-normal then ;

: ?pea ( - )
    energy @ 1 = ?exit  \ TODO: add "jammed gun" animation/sound
    automatic @ if
        shooting @ if
            time @ .12 >= if 0 time ! then
            time @ 0= if 1 pea then
        then
    else
        shooting @ if
            1 pea
            shooting off
        then
    then ;
    
: ?shake ( - )
    shaking @ dup 3. 3. 2p* 2rnd 2. 2. 2- x 2+! ;

: !ang ( - )
    n2 @ p>f aim @ p>f 0.2e alerp f>p n2 ! ;

: !pos ( - )
    n2 @ 32. vec  owner 's x 2@ 2+  owner 's vx 2@ 2+  x 2!
    n2 @ 360. umod 180. >= if 1. 1. x 2+! then
    ?shake
    x 2@ 2i x 2! ;

: !bmp ( - )
    turret.ts n2 @ ang>bmp flicker bmp ! ;

turret% :: init
    turret.ts 0 tile bmp !
    *bars
    -1 level !
    act>
        ?aim ?charge ?pea
        !ang !pos !bmp !bars ;

