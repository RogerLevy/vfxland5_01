\ hanoi.vfx - Text-based Towers of Hanoi puzzle
\ VFXLand 5 / VFX Forth implementation

\ private

\ Game state
variable #disks      \ number of disks (3-9)
variable #moves      \ move counter
variable solved?     \ game completion flag

\ Tower data structures using VFXLand 5 arrays
10 constant max-disks
10 cell stack tower0   \ Tower 0 (leftmost)
10 cell stack tower1   \ Tower 1 (middle)
10 cell stack tower2   \ Tower 2 (rightmost)

\ Tower array for indexed access
create towers tower0 , tower1 , tower2 ,

\ Tower access words
: tower ( n -- array ) cells towers + @ ;
: empty? ( tower -- f ) #items 0= ;
: full? ( tower -- f ) #items max-disks = ;
: peek ( tower -- disk ) dup empty? if drop 0 else tos @ then ;
: tower-push ( disk tower -- ) dup full? if 2drop else push then ;
: tower-pop ( tower -- disk ) dup empty? if drop 0 else pop then ;

\ Game setup
: clear-towers ( -- )
    3 for i tower vacate loop ;

: setup-game ( n -- )
    {: n | disks :}
    n 3 max 10 min to disks
    disks #disks !
    clear-towers
    0 #moves !
    0 solved? !
    disks for
        disks i - 0 tower tower-push
    loop ;

\ Display functions
: .disk ( n -- )
    {: n | spaces :}
    n 0= if 
        ."           |" 
    else
        10 n - to spaces
        spaces for space loop
        n for [char] * emit loop
        [char] | emit
        n for [char] * emit loop
    then ;

: .tower ( n -- )
    {: n | t items :}
    cr ." Tower " n 1+ . cr
    n tower to t
    0 9 do
        i t #items < if i t [] @ else 0 then
        .disk cr
    -1 +loop
    ." ---------------------" cr ;

: .towers ( -- )
    page
    cr ." Towers of Hanoi - " #disks @ . ." disks" cr
    ." Moves: " #moves @ . cr cr
    3 for
        i 20 * 5 at-xy
        i .tower
    loop ;

: .rules ( -- )
    cr ." Rules:" cr
    ." - Move all disks from Tower 1 to Tower 3" cr
    ." - Only move one disk at a time" cr
    ." - Never place a larger disk on a smaller one" cr
    ." - Enter moves as: source dest (e.g., '1 3')" cr
    ." - Enter 'q' to quit" cr ;

\ Move validation
: valid-move? ( src dest -- f )
    {: src dest :}
    src 0< dest 0< or if 0 exit then
    src 2 > dest 2 > or if 0 exit then
    src dest = if 0 exit then
    src tower empty? if 0 exit then
    dest tower empty? if -1 exit then
    src tower peek dest tower peek < ;

\ Game logic
: make-move ( src dest -- )
    {: src dest :}
    src dest valid-move? if
        src tower tower-pop dest tower tower-push
        1 #moves +!
    else
        cr ." Invalid move!" cr
    then ;

: check-win ( -- )
    2 tower #items #disks @ = if
        -1 solved? !
        cr ." Congratulations! You solved it in " #moves @ . ." moves!" cr
    then ;

\ Input handling
: get-move ( -- src dest f )
    {: | k src dest :}
    cr ." Enter source: "
    key to k
    k [char] q = if 0 0 0 exit then
    k [char] 0 - 1 - to src
    cr ." Enter destination: "
    k [char] q = if 0 0 0 exit then
    key [char] 0 - 1 - to dest
    src dest -1 ;

\ Main game loop
: play-hanoi ( -- )
    begin
        .towers
        solved? @ not
    while
        get-move if
            make-move
            check-win
        else
            drop drop
            cr ." Goodbye!" cr
            exit
        then
    repeat ;

\ public

\ Public interface
: hanoi ( -- )
    {: | n :}
    .rules
    cr ." Enter number of disks (3-9): "
    key [char] 0 - to n
    n 3 9 clamp to n 
    n setup-game
    play-hanoi ;
