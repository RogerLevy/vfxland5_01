((
: MATERIALIZE
	ensure totem exists
	if creating one, set its srcpath

: MANIFEST
    if not new, UNLOAD
    LOAD

: +TOTEM 
    convenience word for parse-ahead MATERIALIZE

:: LOAD
:: _LOAD
    load/create external resources
    _LOAD default: none

:: UNLOAD 
:: _UNLOAD
    free external resources
    _UNLOAD default: none

: INTAKE 
:: _INTAKE
    load initial data into the dictionary 
    _INTAKE default: deserialize totem

: COMMIT
:: _COMMIT
    save relevant data to disk - any of the following:
        1. serialize totem (_COMMIT default)
        2. serialize some other objects
        3. save other data (such as bitmaps)

: REHEAT (formerly LOAD-TOTEM)
    Load on startup.
    MATERIALIZE
    INTAKE
    LOAD

: RELOAD 
    Hot-reload.
:: _RELOAD 
    default:
        INTAKE
        UNLOAD
        LOAD

Added:
    [x] SERIALIZE
    [x] DESERIALIZE - deserialize if given path exists

))

trait: _totem
    prop existed
    256 nprop srcpath <cstring                  
    \ :: extension ( - a len ) stub ;
    :: default-path ( - path len )      \ Where TOTEM locates assets by default 
        s" " ;                          \ - is supplied to MATERIALIZE
                                        \ - the srcpath can always be overriden
    :: _load ( - ) ;                    \ Load/create external resources
    :: _unload ( - ) ;                  \ Free external resources (safe if empty)
    :: _intake ( - ) ;                  \ Load initial data into dictionary
    :: _commit ( - ) ;                  \ Save totem/other data to disk
    :: _reload ( - ) ;                  \ Hot reload
trait;

: my-name me body> >name count ;
: new? -> existed @ not ;

_totem :: load ( - ) 
    me _load ;
_totem :: unload ( - ) 
    me _unload ; 

: intake ( totem - )
     _intake ;
    
: reload  ( totem - ) 
    _reload ;

: find-totem ( $ - totem|0 )
    find if >body dup _totem is? and else drop 0 then ;

: srcpath! ( path len totem - )
    [[ >abspath srcpath place ]] ;

: materialize ( path len class - obj )
    \ Find or create totem object by name or path (dev/compile/runtime)
    {: path len class0 :}
    path len -path >pad find-totem ?dup 
    if 
        dup -> existed on 
    else 
        class0 path len -path $object
        [[ path len me srcpath!   me ]]
    then ;

: manifest ( obj - obj )
    \ Initialize totem for use (dev-time or runtime)
    [[
        me new? not if me unload then
        me load 
    ]] ;

|| : !default-path
    me body> >name count
    me default-path f" %s/%s" me srcpath! ;

: +totem ( class <name> - obj )
    \ Parse name and materialize totem (dev-time or compile-time)
    bl parse rot materialize 
    [[ !default-path   me ]] ;

: serialize ( obj path len - )
    2>r temp[ ( obj ) serbin temp]
    2r> ['] write catch abort" File write error" ;

_totem :: _commit ( - )
    me srcpath count serialize ;    

: commit ( totem - )
    [[ 
        srcpath count -file ensure-dir 
        me _commit 
    ]] ;

|| 0 value (dest)
|| : into-dest ( class - obj )
||     drop   (dest) ;

: deserialize ( path len dest-a - )
    (dest) >r
    to (dest)  ['] file@ catch nip abort" File read error"
    ( a ) dup >r ['] into-dest desbin drop  
    r> free throw
    r> to (dest) ;

_totem :: _intake ( - )
    srcpath count me deserialize ;

: reheat ( fn len class - totem )
    \ Load single totem from file (runtime/startup)
    materialize dup intake dup load ;

|| 0 value class0
|| : (reheat) ( fn len - )
    class0 reheat drop ;

: reheat-dir ( path-a path-len class - )
    \ Load all totems from given directory (runtime/startup)
    \ Not recursive.
    \ TODO: filter by extension
    to class0   ['] (reheat) each-file ;

: reheat-default-dir ( class - )
    \ TODO: filter by extension
    \ Not recursive.
    dup defaults default-path rot reheat-dir ;

: reload ( totem - )
    \ Reload totem from disk (dev-time)
    dup intake dup unload load ;

|| : (reload) ( fn len - )
    class0 materialize reload ;

: reload-dir ( path-a path-len class - )
    \ Reload all totems in given irectory (dev-time hot-reload)
    \ Not recursive.
    \ TODO: filter by extension
    to class0   ['] (reload) each-file ;

: reload-default-dir ( class - )
    \ TODO: filter by extension
    \ Not recursive.
    dup defaults default-path rot reload-dir ;

: into-me ( class - obj )
    drop me ;

\ =============================================================================

|| _trait object _totem-fresh  
_totem _totem-fresh copy drop

: reset-totem-trait
    _totem-fresh _totem copy drop ;

