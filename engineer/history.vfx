\ ------------------------------------------------------------------------------
\ Command History
\ Uses cell-counted strings with dynamic memory management
\ Mostly by Claude Sonnet 4
\ ------------------------------------------------------------------------------

fast[

\ History storage
variable history-buffer    \ allocated memory for history string
variable history-size      \ current allocated size
variable line-offsets      \ allocated array of line start positions  
variable max-lines         \ maximum number of lines
variable line-count        \ current number of lines
variable scroll-pos        \ current top visible line (0-based)
variable visible-lines     \ how many lines fit in display area
variable last-line-start

: free-history ( - )
    \ Free allocated memory
    history-buffer @ ?dup if free drop then
    line-offsets @ ?dup if free drop then
    0 history-buffer !
    0 line-offsets ! ;

: resize-history ( new-size - )
    {: new-size :} 
    \ Resize history buffer
    new-size history-size @ > if
        history-buffer @ new-size resize drop
        history-buffer !
        new-size history-size !
    then ;

: resize-line-offsets ( new-max-lines - )
    {: new-max-lines :} 
    \ Resize line offsets array
    new-max-lines max-lines @ > if
        line-offsets @ new-max-lines cells resize drop
        line-offsets !
        new-max-lines max-lines !
    then ;

: current-history-length ( - len )
    \ Get current length of history string
    history-buffer @ @ ;

: ensure-space ( needed-bytes - )
    \ Ensure history buffer has enough space
    {: needed | total :}
    current-history-length needed + cell + to total
    total history-size @ > if
        total 2 * resize-history
    then ;

: rebuild-line-cache ( - )
    \ Rebuild line offset cache after history changes
    {: | start-addr end-addr line-num :}
    0 line-count !
    0 line-offsets @ !
    
    history-buffer @ cell+ to start-addr
    start-addr current-history-length + to end-addr
    
    end-addr start-addr ?do
        i c@ 13 = if
            line-count @ 1 + dup line-count ! to line-num
            \ Ensure line-offsets array is big enough
            line-num max-lines @ >= if
                max-lines @ 262144 + resize-line-offsets  \ grow by 256K lines (1MB)
            then
            line-num cells line-offsets @ +
            i 1 + start-addr - swap !
        then
    loop
    
    current-history-length 0> line-count @ 0= and if
        1 line-count !
    then ;

: line-start ( line# - addr )
    \ Get start address of given line number
    dup 0= if 
        drop history-buffer @ cell+  \ first line
    else
        ( 1 - ) cells line-offsets @ + @
        history-buffer @ cell+ +
    then ;

: line-end ( line# - addr )
    \ Get end address of given line number  
    dup line-count @ 1 - >= if
        drop history-buffer @ cell+ current-history-length +
    else
        1 + line-start
    then ;

: line-text ( line# - addr len )
    \ Get text of given line (without CR)
    dup line-start swap line-end over - ;

: add-line-offset ( offset - )
    \ Add single line offset to cache
    line-count @ dup max-lines @ >= if
        max-lines @ 262144 + resize-line-offsets
    then
    cells line-offsets @ + ! ;

: add-history-linebreak ( - )
    last-line-start @ add-line-offset
    current-history-length last-line-start !
    1 line-count +!
    visible-lines @ if
        line-count @ visible-lines @ - 0 max scroll-pos !
    then ;

: add-history-byte ( char - )
    {: | char[ 1 ] :}
    char[ c!
    1 ensure-space
    char[ 1 history-buffer @ wappend ;
 
: scroll-up ( - )
    scroll-pos @ 0> if -1 scroll-pos +! then ;

: scroll-down ( - )
    scroll-pos @ visible-lines @ + line-count @ < if 1 scroll-pos +! then ;

: page-up ( - )
    scroll-pos @ visible-lines @ - 0 max scroll-pos ! ;

: page-down ( - )
    scroll-pos @ visible-lines @ + line-count @ visible-lines @ - min scroll-pos ! ;

: scroll-to-bottom ( - )
    line-count @ visible-lines @ - 0 max scroll-pos ! ;

: scroll-to-top ( - )
    0 scroll-pos ! ;

: history-draw-line ( n - )
    dup 0 line-count @ within? not if drop exit then
    line-text 3 / for 
        c@+ swap c@+ vga@ swap c@+ vga@ swap >r textmode-write
        r> 
    loop drop ;

: draw-history (  - )
    {: | line-num :}
    monw 2 / 8 /   visible-lines @   textmode-dim
    textmode-clear
    visible-lines @ for
        scroll-pos @ i + to line-num
        line-num line-count @ < if
            0 i textmode-locate
            line-num history-draw-line
        else
            leave
        then
    loop 
    monw 2 / 8 /   visible-lines @   at@f   textmode-draw ;

: init-history ( - )
    \ Start with reasonable defaults - both will grow as needed
    262144 max-lines !  \ 256K lines initially (1MB / 4 bytes per cell)
    
    \ Allocate 1MB history buffer
    1048576 dup >r allocate abort" Failed to allocate history buffer"
    history-buffer !
    r> history-size !
    
    \ Clear history string (cell-counted)
    0 history-buffer @ !
    
    \ Allocate line offset cache for 256K lines (1MB)
    max-lines @ cells allocate abort" Failed to allocate line offsets"
    line-offsets !
    
    0 line-count !
    0 scroll-pos !
    0 last-line-start !
    0 add-line-offset ;

aligned-page hist-stack
variable hsp   hist-stack hsp ! 
: hist-push ( ? - ) hsp @ !  4 hsp c+! ;
: hist-pop ( - ? ) -4 hsp c+!  hsp @ @ ;

: (echo) ( c - )
    \ Echo to VFX console
    op-handle @ >r   consoledev op-handle !   emit   r> op-handle ! ;

: hist-cr ( - )
    drop   add-history-linebreak   10 (echo)   0 out ! ;

: hist-emit ( c sid - )
    drop   
    dup add-history-byte   
    attr c@ add-history-byte
    attr 1 + c@ add-history-byte
    (echo)   1 out +! ;

: hist-type ( a len - )
    drop   bounds ?do  i c@ 0 hist-emit  loop ;

: hist-ff ( - )
    drop   free-history init-history ;
    
create vectors
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' hist-emit ,
  ' drop ,
  ' hist-type ,
  ' hist-cr ,
  ' drop ,
  ' hist-ff ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,

create hist-dev   0 , vectors ,

: hist[ ( - )
    op-handle @ hist-push
    hist-dev op-handle ! ;

: hist] ( - )
    hist-pop op-handle ! ;

fast]