\ ------------------------------------------------------------------------------
\ IDE2 - Next-Level Development Interface  
\ ------------------------------------------------------------------------------

private   
include %idir%/history.vfx   \ private to this file's vocabulary

: toggle dup @ 0= swap ! ;
synonym dup-endcase end-case
aligned-page uios
variable uiosp  uios uiosp !
variable display-mode  \ 0 = IDE, 1 = Fullscreen (game), 2 = Windowed (game)

: ?type ?dup 0= if drop else type then ;

create scalexy

: scaled>  ( x. y. - <code> ; )
    2dup scalexy 2! +m 0e 0e 2p>f 0e transform r> execute -m ;

: scaled-at ( x y - )
    scalexy 2@ 2p/ at ;

\ =============================================================================
\ IDE Components Display
\ =============================================================================

variable active  active on
variable stackmode
stackmode jumptable ?.
    ' . , ' p. , ' h. , ' .name ,

\ : win/ ( x. y. - x y )
\     winw winh 2swap 2p* ;
\ 
\ : pos ( x. y. - )
\     \ Position the pen proportionally to the display
\     win/ at ;

variable hsplit   0.5 hsplit !

: split-x ( - x )
    winw hsplit @ p* ;

: from-bottom ( y - y )
    winh swap - ;

: lines ( n - h )
    24 * ;

borrow engineer~ draw-game
: (2x-game) 2. 2. scaled> draw-game ;
: gamewin-h apph 2 * 100 + ;
: game-window ( - )
    0 0 monw 2 / gamewin-h al_set_clipping_rectangle

    +m
    identity
    monw 4 / appw - 2 +
    gamewin-h 2 / apph - 2 +
    2s>f 1e 1e 0e transform

    (2x-game)

    1e f>ds >r
    -1e -1e appw 2 * 1 + apph 2 * 1 + 2s>f 
    repl @ if 
        1e 1e 1e 1e
    else
        0e 1e 0.5e 1e
    then
    r> al_draw_rectangle
    
    -m
    0 0 monw monh al_set_clipping_rectangle ;

borrow engineer~ func[]
: .hotkeys ( - )
    s" Alt+Enter=Display  Tab=REPL  Esc=Quit  Alt+F4=Exit  " type cr
    12 for
        i func[] c@ if
            i func[] count 2dup upper i 1 + f" F%n=%s  " type
        then
    loop ;

: .honing ( - )
    honing @ 0= if ." OFF " exit then
    honing @ if
        honing @ -1 = if
            retry-filepath$ count ?type
        else
            honing @ .name
        then
    then ;

: .state ( - )
    state @ if ." COMPILING" else ." INTERPRETING" then ;

: .unused ( - )
    unused .comma ."  bytes" ;

: .hold ( - )
    hold @ if ." ON" else ." OFF" then ;

: .watch ( - )
    watch-xt @ -exit
    watch-context @ .name
    ." > "
    watch$ count ?type cr
    push-order
    only forth watch-context @ +order
    s[ watch-xt @ catch drop s] ?type
    pop-order
    ;

: info-box ( - )
    1. 2. scaled>
    0 gamewin-h scaled-at
    s[
        .hotkeys cr
        ." CWD: " path '\' ending type cr
        ." Me: " .me cr
        ." Context: " context @ .name ."  Current: " current @ .name cr
        ." Honing: " .honing cr
        ." State: " .state cr
        ." Dict free: " .unused cr
        ." Hold: " .hold cr
        ." Watch: " cr .watch cr
    s] 12 print2 ;

: user-area ( - )
    1. 2. scaled>
    0 gamewin-h 10 lines + scaled-at
    s" (User Area)" print ;

: command-history ( - )
    1. 2. scaled>
    split-x 0 at
    monh 7 lines - 24 / visible-lines !
    s[ render-history s] 12 print2 ;

: ints  0 stackmode ! ;
: fixes  1 stackmode ! ;
: hexes  2 stackmode ! ;
: names  3 stackmode ! ;

: ?.s ( - )
    depth | d |
    d 0 max 0 ?do d 1 - i - pick ?. loop
    cr ; 

: stack-display ( - )
    1. 2. scaled>
    split-x 6 lines from-bottom scaled-at
    s[  
        names ?.s
        ints ?.s
        fixes ?.s
        hexes ?.s
        \ f.s
    s] 12 print2 ;

: .prompt ( - ) 
    context @ .name
    ." > "  tib #tib @ ?type ;

: command-line ( - )
    1. 2. scaled>
    split-x 1 lines from-bottom scaled-at
    s[
        .prompt
        active @ repl @ and if
            counter 20 / 8 and if ." _" then
        then
    s] print ;
    
: ide-layout ( - )
    \ title-bar
    game-window     command-history
    info-box        stack-display
    ( user-area )   command-line ;

\ =============================================================================
\ History I/O device
\ =============================================================================

create str 32768 allot
0 value >str

: hist-emit  drop  str >str + c!  1 +to >str  1 out +! ;
: hist-type  drop  bounds ?do  i c@ 0 hist-emit  loop ;
: hist-cr    drop  10 0 hist-emit  0 out ! ;

create vectors
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' hist-emit ,
  ' drop ,
  ' hist-type ,
  ' hist-cr ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
create hist-dev   0 , vectors ,
0 value old-dev
: hist[  0 to >str  op-handle @ to old-dev  hist-dev op-handle ! ;
: hist]  old-dev op-handle !  str >str add-history ;

\ =============================================================================
\ IDE Logic
\ =============================================================================

: obey ( - )
    osp @ >r uiosp @ osp !    
    s[ .prompt s] add-history 
    hist[
        tib #tib @ to-source
        -1 to source-id
        0 >in !
        'SourceFile off
        ['] interpret catch
        ?dup if .throw rs state off then
        0 #tib ! 
    hist]
    osp @ uiosp ! r> osp ! ; 

: ?char ( n - )
    alt? if drop exit then
    case
        ( bksp ) 8 of #tib @ -exit -1 #tib +! exit endof
        ( tab ) 9 of exit endof
        ( enter ) 13 of alt? not if obey then exit endof
        ( esc ) 27 of exit endof
    dup-endcase
    dup 32 < over 127 = or if drop exit then
    tib #tib @ + c! 1 #tib +! ;

: ?key ( n - )
    case
        <up> of scroll-up endof
        <down> of scroll-down endof
        <pad8> of scroll-up endof
        <pad2> of scroll-down endof
        <pgup> of page-up endof
        <pgdn> of page-down endof
        <pad9> of page-up endof
        <pad3> of page-down endof
        <home> of scroll-to-top endof
        <end> of scroll-to-bottom endof
        <pad7> of scroll-to-top endof
        <pad1> of scroll-to-bottom endof
        drop
    end-case ;

: repl-events ( - )
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <tab> = if
            repl toggle
        then
        the-key <`> = if
            ide @ not if
                repl toggle
            then
        then
    then
    ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? if
        active off
        display-mode @ 0= ide @ and if hold on then
    then
    ALLEGRO_EVENT_DISPLAY_SWITCH_IN happened? if
        active on
        display-mode @ 0= ide @ and if hold off then
    then
    repl @ if
        ALLEGRO_EVENT_KEY_CHAR happened? if
            the-char ?char
            the-key ?key
        then
    then ;

\ =============================================================================
\ Display Modes
\ =============================================================================

borrow engineer~ fullscreen
borrow engineer~ windowed
borrow engineer~ winmode
borrow engineer~ draw-tv

: ide-mode ( - )
    fullscreen winmode
    ide on repl on ;

: full-mode ( - )
    fullscreen winmode
    ide off repl off ;
    
: windowed-mode ( - )
    windowed winmode
    ide off repl off ;

display-mode jumptable enact-display-mode
    ' ide-mode ,
    ' full-mode ,
    ' windowed-mode ,

: ide-mode-draw ( - )
    pen 2@ 2>r ide-layout 2r> at ;

: full-mode-draw ( - )
    draw-tv
    ( draw repl here )
    ;
    
: windowed-mode-draw ( - )
    ?border draw-game
    ( draw repl here ) ;

display-mode jumptable draw-display-mode
    ' ide-mode-draw ,
    ' full-mode-draw ,
    ' windowed-mode-draw ,

\ =============================================================================
\ Public Words
\ =============================================================================

borrow engineer~ -keys

public

: ide-?w/f ( - )
    <enter> pressed?  alt? and if
        \ Toggle between 3 states: windowed, fullscreen (IDE), and fullscreen (game)
        display-mode @ 1 + 3 umod display-mode !
        enact-display-mode
        -keys
    then ;

: ide-events ( - )
    debug @ if
        ALLEGRO_EVENT_KEY_DOWN happened? if
            the-key ?func
        then
        repl-events
    then ;

: draw-ide ( - )
    +m identity cls draw-display-mode -m ;

: init-ide ( - )
    init-history 
    0 display-mode !
    enact-display-mode ;

\ ???
' noop is boot
' noop is onSwitchIn
