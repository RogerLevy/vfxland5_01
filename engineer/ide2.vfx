\ ------------------------------------------------------------------------------
\ IDE2 - Next-Level Development Interface  
\ ------------------------------------------------------------------------------

private   
include %idir%/history.vfx   \ private to this file's vocabulary

: toggle dup @ 0= swap ! ;
synonym dup-endcase end-case
aligned-page uios
variable uiosp  uios uiosp !
: ?type ?dup 0= if drop else type then ;

create scalexy

: scaled>  ( x. y. - <code> ; )
    2dup scalexy 2! +m identity 0e 0e 2p>f 0e transform r> execute -m ;

: scaled-at ( x y - )
    scalexy 2@ 2p/ at ;

\ =============================================================================
\ IDE Components Display
\ =============================================================================

variable active  active on
variable stackmode
stackmode jumptable ?. ' . , ' p. , ' h. , ' .name ,

\ : win/ ( x. y. - x y )
\     winw winh 2swap 2p* ;
\ 
\ : pos ( x. y. - )
\     \ Position the pen proportionally to the display
\     win/ at ;

variable hsplit   0.5 hsplit !

: split-x ( - x )
    winw hsplit @ p* ;

: from-bottom ( y - y )
    winh swap - ;

: lines ( n - h )
    24 * ;

borrow engineer~ draw-game
: game-window ( - )
    2. 2. scaled>
    0 0 640 480 al_set_clipping_rectangle
    draw-game
    0 0 winw winh al_set_clipping_rectangle ;

: .honing ( - )
    honing @ 0= if ." OFF " exit then
    honing @ if
        honing @ -1 = if
            retry-filepath$ count ?type
        else
            honing @ .name
        then
    then ;

: .state ( - )
    state @ if ." COMPILING" else ." INTERPRETING" then ;

: info-box ( - )
    0 600 scaled-at
    s[
        ." CWD: " path '\' ending type cr
        ." Me: " .me cr
        ." Context: " context @ .name ." Current: " current @ .name cr
        ." Honing: " .honing cr
        ." State: " .state cr
        ." Watch: "
    s] 12 print2 ;

: user-area ( - )
    0 600 8 lines + scaled-at
    s" (User Area)" print ;

: command-history ( - )
    1. 2. scaled>
    split-x 0 at
    monh 7 lines - 24 / visible-lines !
    s[ render-history s] 12 print2 ;

: ints  0 stackmode ! ;
: fixes  1 stackmode ! ;
: hexes  2 stackmode ! ;
: names  3 stackmode ! ;

: ?.s ( - )
    depth | d |
    d 0 max 0 ?do d 1 - i - pick ?. loop
    cr ; 

: stack-display ( - )
    1. 2. scaled>
    split-x 6 lines from-bottom scaled-at
    s[  
        ints ?.s
        fixes ?.s
        hexes ?.s
        names ?.s
        \ f.s
    s] 12 print2 ;

: .prompt ( - ) 
    context @ .name
    ." > "  tib #tib @ ?type ;

: command-line ( - )
    1. 2. scaled>
    split-x 1 lines from-bottom scaled-at
    s[
        .prompt
        active @ repl @ and if
            counter 20 / 8 and if ." _" then
        then
    s] print ;
    
: ide-layout ( - )
    \ title-bar
    game-window     command-history
    info-box        stack-display
    user-area       command-line ;

\ =============================================================================
\ History I/O device
\ =============================================================================

create str 32768 allot
0 value >str
: hist-emit  drop  str >str + c!  1 +to >str ;
: hist-type  drop  bounds ?do  i c@ 0 hist-emit  loop ;
: hist-cr    drop  10 0 hist-emit ;
create vectors
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' hist-emit ,
  ' drop ,
  ' hist-type ,
  ' hist-cr ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
create hist-dev   0 , vectors ,
0 value old-dev
: hist[  0 to >str  op-handle @ to old-dev  hist-dev op-handle ! ;
: hist]  old-dev op-handle !  str >str .s add-history ;

\ =============================================================================
\ IDE Logic
\ =============================================================================

: obey ( - )
    osp @ >r uiosp @ osp !    
    s[ .prompt s] add-history 
    cr tib #tib @ hist[ ['] evaluate catch 0 #tib ! hist]
    osp @ uiosp ! r> osp !    
    dup .throw-catch if rs state off then ; \ throw ;

: ?charkey ( - )
    alt? if drop exit then
    case
        ( bksp ) 8 of #tib @ -exit -1 #tib +! exit endof
        ( tab ) 9 of exit endof
        ( enter ) 13 of alt? not if obey then exit endof
        ( esc ) 27 of exit endof
    dup-endcase
    dup 32 < over 127 = or if drop exit then
    tib #tib @ + c! 1 #tib +! ;

: repl-events ( - )
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <tab> = if
            repl toggle
        then
        the-key <`> = if
            ide @ not if
                repl toggle
            then
        then
    then
    ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? if
        active off
    then
    ALLEGRO_EVENT_DISPLAY_SWITCH_IN happened? if
        active on
    then
    repl @ if
        ALLEGRO_EVENT_KEY_CHAR happened? if
            the-char ?charkey    
        then
    then ;

\ =============================================================================
\ Public Words
\ =============================================================================

borrow engineer~ w/f
borrow engineer~ -keys

public

: ?w/f ( - )
    <enter> pressed?  alt? and if
        w/f -keys
        fullscreen? ide !
        ide @ repl ! 
    then ;

: ide-events ( - )
    debug @ if
        ALLEGRO_EVENT_KEY_DOWN happened? if
            the-key ?func
        then
        repl-events
    then ;

: draw-ide ( - )
    cls
    2. 2. scaled>
    pen 2@ 2>r ide-layout 2r> at ;

: init-ide ( - )
    init-history 
    fullscreen winmode ;

\ ???
' noop is boot
' noop is onSwitchIn
