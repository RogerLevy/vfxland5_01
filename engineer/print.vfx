\ ------------------------------------------------------------------------------
\ VGA text
\ ------------------------------------------------------------------------------

\ Palette
include vga13h.vfx

\ Backend
|| variable rmargin
|| create bg.png here
    s" builtin\gfx\vga2_8x8_allegro5.png" file,
|| here swap - constant /bg.png
|| 0 value vga-8x8 \ font
|| create range(s) 0 , 255 ,

: font@  vga-8x8 ;

|| create fg  1e sf, 1e sf, 1e sf, 1e sf, 
|| : sf-!  cell- dup sf! ;
|| : 4f!  4 cells + sf-! sf-! sf-! cell- sf! ;
|| : fcolor  fg 4f! ;
|| : c  dup 24 >> s>f 255e f/ ;
|| : (color)  c 8 << c 8 << c 8 << c drop fcolor ;
|| : sf@+  dup sf@ cell+ ;
|| : 4f@  sf@+ sf@+ sf@+ sf@ ;

\ Rendering
: color ( n - )
    255 and cells vga13h + @ 8 << $ff or (color) ;

|| create zstr 65536 allot

variable line-spacing  8 line-spacing !

: mltext ( a len w - )
    over 0= if 3drop exit then 
    >r zstr zplace  zstr r> s>f f>ds   
    line-spacing @ s>f f>ds | lh w z | 
    font@  fg 4f@  at@f w lh 0 z al_draw_multiline_text ;

: print ( a len - )
    winw pen x@ - mltext ;

: print2 ( a len line-spacing - )
    line-spacing @ >r line-spacing !
    print
    r> line-spacing ! ;

: textw ( a n - n )
    zstr zplace  zstr  font@  swap  al_get_text_width ;  

: glyph ( n - )
    >r  font@ fg 4f@ at@f  r> al_draw_glyph ;

\ Init
: init-vga-font
    bg.png /bg.png 0 z" r" al_open_memfile >r
    r@ 0 al_load_bitmap_f
    r> al_fclose drop
        1 range(s) al_grab_font_from_bitmap
        to vga-8x8 ;
