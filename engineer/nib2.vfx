\ ------------------------------------------------------------------------------
\ Engineer OOP extension - Nib 2.0 Foundation
\ ------------------------------------------------------------------------------
\ ==============================================================================
\ [ ] Phase 1: Foundation infrastructure 
\ [ ] Phase 2: Classifier bit allocation system
\ [ ] Phase 3: Field type registry and protocols
\ [ ] Phase 4: Enhanced message dispatch with classifier checks
\ [ ] Phase 5: Advanced object creation with type validation
\ ==============================================================================

validations off

0 value me
0 value classifier
1024 constant #max-classifiers
variable next-classifier#

\ ==============================================================================
\ Low-level stuff
\ ==============================================================================

magic-id MAGIC_FIELD FIEL
: field ( ofs size - <name> n ) ( a - a )
    create 0 , MAGIC_FIELD , over , +
    does> 2 cells + @ me + ;

: 's ( object - <name> a )
    ' >body 2 cells + @ ?literal s" +" evaluate ; immediate 

: ?already ( ? - b )
    {: n :}
    preword find if
        >body @ n = dup if bl word drop then
    else drop 0 then ; 

|| : ?literal  state @ if postpone literal then ;

: -% ( a c -- a c' )
    dup -exit 2dup + 1 - c@ '%' = -exit 1 - ;

cstring name$
: >$ ( a len - $ )
    name$ place name$ ;

\ ==============================================================================
\ Object stack
\ ==============================================================================

: pagealign ( - )  here $ff and 256 swap - allot ;
: aligned-page ( - <name> )  pagealign here $100 allot constant ;
aligned-page os
variable osp   os osp ! \ object stack pointer

\ ==============================================================================
\ Object scoping
\ ==============================================================================

: [[ ( object - ) me osp @ !  4 osp c+!  to me ;
: unsafe-[[ ( a - ) me osp @ !  4 osp c+!  to me ;
: ]] ( - ) -4 osp c+!  osp @ @ to me ;
: you ( - object ) osp @ cell- @ ;
: that ( - object ) osp @ @ ;

\ ==============================================================================
\ Classes
\ ==============================================================================

4096 constant /classifier

0
    cell field cla
dup constant /object-base
    cell field magic
constant /magical-base

/magical-base
    cell field instance-size                   \ Size of this class
    cell field next-ofs                     \ Next field offset for this class
    cell field field-space-size
    #max-classifiers 8 / field bit-table    \ 128 bytes for 1024-bit classification table
value /static                               \ next static field offset

   
|| : (classifier) ( class - class )
    here swap , /classifier cell- allot&erase
    [[ /classifier instance-size ! me ]] ;
    
|| : create-classifier ( class - <name> class )
    create (classifier) ;

magic-id CLASS_MAGIC CLAS

create class% class% (classifier) [[ CLASS_MAGIC magic ! ]]
class% create-classifier trait% [[ CLASS_MAGIC magic ! ]]
class% create-classifier extension% [[ CLASS_MAGIC magic ! ]]

\ TODO: implement SETUP TEARDOWN INIT DEINIT with OBJECT% trait added to every object
\ trait% create-classifier object% [[ ]] 

: object ( class - object )
    \ TODO: validate class
    here over , swap 's instance-size @ cell- allot&erase ;

: $create-object ( class name len - object ) ( - object ) 
    >$ $create object
    \ does-xt if 
    \     postpone does>
    \     does-xt compile,
    \     postpone ;
    \ then
;

: create-object ( class - <name> ) ( - object )
    bl parse $create-object ;
    
\ : static ( - <name> ) ( - a )
\     static% ?already ?exit    
\     /static  cell field  to /static
\     does> @ me >statics + ;

class% create-object var% [[
    /magical-base
        cell field offset
        cell field magic
    dup instance-size ! next-ofs !
]]

|| : has-field-space? ( class - b )
    's field-space-size @ 0<> ;
    
|| : ?no-field-space ( - b )
    classifier has-field-space? not dup if bl word drop then ;

: field-space ( n - )
    classifier [[
        field-space-size !
        field-space-size @ instance-size !
    ]] ;
        
: var ( - <name> ) ( - a )
    ?no-field-space if
        -1 abort" VAR >> Class has no field space defined."
    then
    var% ?already ?exit
    var% create-object [[
        classifier 's next-ofs @ offset !
        cell classifier 's next-ofs +!
        classifier has-field-space? not if            
            next-ofs @ classifier 's instance-size !
        then
        MAGIC_FIELD magic !
    ]]
    does> 's offset @ me + ;  

: class:
    class% create-object to classifier
    classifier [[
        /object-base instance-size !
        /object-base next-ofs !
    ]] ;

: class;
    0 to classifier ;
    
\ : trait:
\     trait% create-object to classifier ;
\ 
\ : trait;
\     0 to classifier ;
\ 
\ : extension:
\     extension% create-object to classifier ;
\ 
\ : extension;
\     0 to classifier ;

|| : >statics ( object - class )
    's cla @ ;

: init-nib ( - )
    [ next-classifier# @ ] literal next-classifier# ! 
    [ /static ] literal to /static ;



\ Tests
\ -----

class: actor%
    512 field-space
    var x
    var y
    var vx
    var vy
class;

actor% create-object test [[
    me .
    x .
    y .
    me 's y .
]]