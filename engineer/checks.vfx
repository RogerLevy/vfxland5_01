validations dup @ swap off

: valid-class? ( a - n:res )
    dup firstname here within  >r  \ in dictionary
    r@ 0< if
        dup /class + @ CLASS_MAGIC = r> and >r
    then
    drop r> ;

: valid-object? ( a - n:res )
    dup firstname here within  >r  \ in dictionary
    r@ 0< if
        dup @ ( class ) valid-class? r> and >r
    then
    drop r> ;

crucial test: check-object ( a - a n:res )
    dup  valid-object? ;
        
before [[ check-object
wrap-word [[

\ ------------------------------------------------------------------------------
\ NOTE: This will NOT work!!! it wraps DO-MESSAGE not the message itself!!!
\
\ before do-message check-object
\ borrow nib~ do-message
\ wrap-word do-message
\ 
\ validations dup @ swap on \ important!
\     : does-validated-message  does> swap do-message ;
\ validations !
\ 
\ : m: ( - <name> <code> ; ) ( ... obj - ... ) 
\     static does-validated-message dispatch, ;
\ ------------------------------------------------------------------------------

magic-id WMESSAGE_MAGIC WMSG
: m: ( - <name> <code> ; ) ( ... obj - ... )
    m:
    state on
    begin
        0 parse 2dup 2>r evaluate 
        2r> s" ;" search nip nip
    until
    state off
    lastbody >name count f" wrap-word %s" evaluate
    WMESSAGE_MAGIC , ;

borrow nib~ ?message
: ?unwrap-message ( - <message> message )
    {: | body :}
    preword find not abort" Message not found" >body to body
    body s/wrapper + @ WMESSAGE_MAGIC = if
        bl parse 2drop
        body @ ( internal xt ) >body 
    else
        ?message
        ' >body 
    then ;

: :: ( class - <message> <code> ; ) ( ... obj - ... )
    ?unwrap-message >:: ;

\ have to redefine these because it's not possible to wrap them ( :: crashes )
cell to /static
static oexec-error-handler ( xt n - )
m: init ( - ) ;
m: destruct ( - ) ;

: ?literal  state @ if postpone literal then ;

\ TODO: properly support immediate word validations to avoid this mess...

validations dup @ swap on
    before ?object check-object
    : ?object ;
validations !

: 's ( a - <name> a )
    validations @ if
        state @ if
            s" ?object" evaluate 
        else
            [ validations dup @ swap on ] ?object [ validations ! ]
        then
    then
    ' >body @ ?literal s" +" evaluate ; immediate 


crucial test: CHECK-BITMAPS-OVERFLOW ( ALLEGRO_BITMAP - ALLEGRO_BITMAP res )
    next-bmp# @ #bitmaps < ;

before +bitmap CHECK-BITMAPS-OVERFLOW

charmful test: CHARMFUL-BITMAP-INDEX ( n - n res )
    dup $ffff and 0 #bitmaps 1 - within 
    dup 0= if
        s" Invalid bitmap index (non-crucial, only reported on first failure for word)" log-warning
        current-validation @ off \ validation disables individually for each word on its first failure
    then ;

crucial test: CRUCIAL-BITMAP-INDEX ( n - n res )
    dup $ffff and 0 #bitmaps 1 - within ;

before bitmap@ CHARMFUL-BITMAP-INDEX
before put CHARMFUL-BITMAP-INDEX
before bmpwh CHARMFUL-BITMAP-INDEX
before bitmap-file CRUCIAL-BITMAP-INDEX

validations !