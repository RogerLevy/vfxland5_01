\ ------------------------------------------------------------------------------
\ Arrays
\ Configurable-width arrays with lots of functions.
\ They can also be used as stacks.
\ PUSH and POP can be used to push/pop a cell from/to the datastack.

\ Todo:
\   INSERT DELETE UNSHIFT SHIFT SORT
\   PUSHDATA copies the source data into the stack.  
\   POPDATA returns the address not the contents.

\ Later I'm going to add deques and have both share an interface.
\ ------------------------------------------------------------------------------

: max-items  @ ;
: /item  cell+ @ ;
: >cnt  cell+ cell+ ;
: #items  >cnt @ ;
: >items  cell+ cell+ cell+ @ ;

: slice, ( addr max width count - )
    {: a m w c :}
    m , w , c , a , ;

: array: ( width - <name> width addr )
    \ Begin building a named prepopulated array
    0 0 0 0 create slice, align here ;

: array; ( width a - )
    \ Complete building a named prepopulated array
    | a w |
    a here a - w / w over lastbody d[ slice, d] ;

: array[ ( width - width a )
    \ Begin building an unnamed prepopulated array
    align here ;

: array] ( width a - array )
    \ Complete building an unnamed prepopulated array
    | a w |
    a here a - w / w over
    here >r slice, r> ;

: pad-array  ( width a max-items - width a )
    \ Pad out an array being built, to given max-items
    | n a w | a w n * + here - allot&erase w a ;

: *array ( max width - <name> )
    \ Create a unnamed, zero'd array
    swap >r array[ r> pad-array array] ;

: array ( max width - <name> )
    \ Create a named, zero'd array
    swap >r array: r> pad-array array; ;    

: *stack ( max width - stack )
    \ Create an unnamed, empty stack
    swap >r array[ r> pad-array array]
    0 over >cnt ! ;

: stack ( max width - <name> )
    \ Create a named, empty stack
    swap >r array: r> pad-array array;
    0 lastbody >cnt ! ;

: ?range
    2dup max-items >= abort" Index out of range."
    over 0< abort" Index out of range." ;

: vacate ( array - )
    0 swap >cnt ! ;

: [] ( n array - a )
    \ Index into an array
    \ "box"
    ?range dup >items swap /item rot * + ;

: tos ( array - a )
    dup #items 1 - swap [] ;

: index ( a array - n )
    | a |
    a >items - a /item /  ; \ a ?range drop ;

: each ( ... xt array - ... ) ( ... a - ... f )
    | a xt |
    a >items a #items a /item * bounds ?do
        i xt execute 0= if unloop exit then
    a /item +loop ;

: each@ ( ... xt array - ... ) ( ... ? - ... f )
    | a xt |
    a >items a #items a /item * bounds ?do
        i @ xt execute 0= if unloop exit then
    a /item +loop ;

: push ( n array - )
    | a |
    a #items a max-items = abort" Overflow."
    1 a >cnt +!  a tos ! ;

: pop ( array - n )
    | a |
    a #items 0= abort" Underflow."
    a tos @  -1 a >cnt +! ;

: n[] ( n. array - a )
    \ Index into array based on a value in range 0 ~ 1.0
    \ "n-box"
    dup >r #items 1 - p* r> [] ;
    
: push-data ( addr:src array - )
    {: src arr :}
    1 arr >cnt +!  src arr tos arr /item move ;

: pop-data ( array - addr )
    {: arr :}
    arr tos  -1 arr >cnt +! ;
