\ ------------------------------------------------------------------------------
\ Tilemap v2
\
\ (Untested)
\ ------------------------------------------------------------------------------

variable pile

trait: _asset
    static registry          \ iterable for managing assets of the asset class
    256 nprop srcpath
trait;
_asset :: init ( - ) ;       \ non-destructive initialization
_asset :: refresh ( - ) ;    \ free resources and re-initialize
_asset :: destroy ( - ) ;    \ free resources
_asset :: use ( - ) ;        \ select for use in other words, such as rendering

\ =============================================================================
\ Tileset
\ =============================================================================
\ Doesn't implement DESTROY because the bitmap system frees all bitmaps

c: _tileset _asset baseid bmp tw th #tiles ;

256 cell stack tilesets
tilesets _tileset 's registry !

|| : bmpw  dup if al_get_bitmap_width then ;
|| : bmph  dup if al_get_bitmap_height then ;

_tileset :: use ( - )
    baseid @ pile ! ;

_tileset :: init ( - )
    {: | b _tw _th :}
    bmp @ bitmap@ to b
    b -exit
    tw 2@ to _th to _tw
    next-bmp# @ >r
    baseid @ next-bmp# !
    b bmph _th - 1 + for
        b bmpw _tw - 1 + for
            b i j _tw _th al_create_sub_bitmap +bitmap drop
        _tw +loop
    _th +loop
    next-bmp# @ baseid @ - #tiles !
    r> next-bmp# ! ;

3 _tileset :construct ( bmp# tw th - )
    tw 2! bmp !
    next-bmp# @ baseid !
    me init
    #tiles @ next-bmp# +!
    me tilesets push ;

: tile ( tileset n - n )
    swap 's baseid @ + ;

: tileset ( bmp# tw th - <name> ) ( - tileset )
    2>r
    dup bitmap@ 0= abort" TILESET >> Null bitmap - can't create tileset."
    2r>
    _tileset object ; 

: init-tilesets ( - )
    ['] init tilesets each@ ;

_tileset :: refresh ( - )
    baseid @ #tiles @ bounds do
         i bitmap@ al_destroy_bitmap
    loop
    me init ;

: refresh-tilesets ( - )
    ['] refresh tilesets each@ ;

: is-tile? ( n - f )
    bitmap@ dup -exit al_is_sub_bitmap ;

\ =============================================================================
\ Tilemap - Low level
\ =============================================================================

|| : nr  0 pen y@ gap + at ;
|| : tile+  pile @ + put gap 0 +at ;

: lay ( a - )
    batch> tmh for tmw for @+ tile+ loop nr loop drop ;

: spot ( col row a - a )
    -rot 0 0 tmw 1 - tmh 1 - 2clamp tmw * + cells + ;

: xy>cr ( x. y. - col row )
    gap dup 2/ 2p>s ;

\ =============================================================================
\ Tile metadata
\ =============================================================================

create metas #bitmaps cells allot&erase
: meta ( n - n ) pile @ + cells metas + @ ;
: collectible?  meta $20 and 0<> ;
: destructible?  meta $80 and 0<> ;
: solid?  meta $0F and $0F = ;
: instakill?  meta $40 and 0<> ;
: trap?  meta $10 and 0<> ;

: load-metas ( a:fn len:fn tileset - )
    >r
        here >r >datadir file,
        r> here over -
    r> 's baseid @ cells metas + swap move ;
