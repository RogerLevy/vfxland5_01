\ ------------------------------------------------------------------------------
\ Room Collisions (rectangle <-> tilemap)
\ dependencies:
\ meta ( n - flags )
\ gap ( - n )
\ spot ( c r a - a )
\ x y vx vy
\ ------------------------------------------------------------------------------
public

0 value lwall?
0 value rwall?
0 value floor?
0 value ceiling?
\ 0 value unhit?

\ ------------------------------------------------------------------------------
private

$08 constant BIT_FLR
$04 constant BIT_CEL
$02 constant BIT_WLT
$01 constant BIT_WRT

\ ------------------------------------------------------------------------------

private

defer hit ( f: x y - f: x y )

0 value map

0e fvalue fgap
0e fvalue nx
0e fvalue ny
0e fvalue px
0e fvalue py
0e fvalue mbw
0e fvalue mbh
0e fvalue tx
0e fvalue ty

: fs@  @ p>f ;
: fs!  f>p swap ! ;
   
( push out )
: +x  fdup +to tx  +to nx  0. vx ! ;
: +y  fdup +to ty  +to ny  0. vy ! ;

: pu ( f: x y - )
    true to floor?  true hit   false to floor?  
    if  fnip fgap fmod fnegate +y
    else  f2drop  then ;
: pd ( f: x y - )
    true to ceiling?  true hit  false to ceiling?  
    if  fnip fgap fmod fnegate fgap f+ +y
    else  f2drop  then ;
: pl ( f: x y - )
    true to rwall?  true hit  false to rwall?  
    if  fdrop fgap fmod fnegate +x
    else  f2drop  then ;
: pr ( f: x y - )
    true to lwall?  true hit  false to lwall?  
    if  fdrop fgap fmod fnegate fgap f+ +x
    else  f2drop  then ;

( check )
: ve+  tx fgap f+  px mbw f+  fmin  to tx ;
: he+  ty fgap f+  ny mbh f+  fmin  to ty ;
: >tmc  fgap f/ floor f>s ;
: >tmc2  roundup 1e f- fgap f/ floor f>s ;
: pt  map spot @ meta ;
: xypt  fswap f>s f>s gap dup 2/ pt ;
: pt1  tx >tmc  ty >tmc pt ;
: pt2  tx >tmc2 ty >tmc pt ;
: pt3  tx >tmc  ty >tmc2 pt ;
: pt4  tx >tmc2 ty >tmc2 pt ;
: cu
    py >tmc ny >tmc  = ?exit
    px to tx  ny to ty
    pt1 BIT_CEL and if tx ty pd then ve+
    me free? ?exit
    mbw fgap f/ roundup f>s for
        me free? if unloop exit then
        pt2 BIT_CEL and if tx 0.5e f- ty pd then ve+
    loop ;
: cd
    py mbh f+ >tmc2  ny mbh f+ >tmc2  = ?exit
    px to tx  ny mbh f+ to ty
    pt3 BIT_FLR and if tx ty pu then ve+
    me free? ?exit
    mbw fgap f/ roundup f>s for
        me free? if unloop exit then
        pt4 BIT_FLR and if tx 0.5e f- ty pu then ve+
    loop ;
: cl
    px >tmc nx >tmc  = ?exit
    nx to tx  ny to ty
    pt1 BIT_WRT and if tx ty pr then he+
    me free? ?exit
    mbh fgap f/ roundup f>s for
        me free? if unloop exit then
        pt3 BIT_WRT and if tx ty 0.5e f- pr then he+
    loop ;
: crt
    px mbw f+ >tmc2  nx mbw f+ >tmc2  = ?exit
    nx mbw f+ to tx  ny to ty
    pt2 BIT_WLT and if tx ty pl then he+
    me free? ?exit
    mbh fgap f/ roundup f>s for
        me free? if unloop exit then
        pt4 BIT_WLT and if tx ty 0.5e f- pl then he+
    loop ;

( axes )
: ud
    vy fs@ f0= ?exit
    vy fs@ f0< if cu else cd then ;
: lr
    vx fs@ f0= ?exit
    vx fs@ f0< if cl else crt then ;

: init
    px vx fs@ f+ to nx
    py vy fs@ f+ to ny
    0 to lwall?  0 to rwall?  0 to floor?  0 to ceiling? ;

: ftil  fdup fgap fmod f- ;

\ ------------------------------------------------------------------------------
\ Collide with solid tiles
public

: tmcol>  ( x y w h a me=obj - ) ( f - f )
    gap s>f to fgap
    \ -1 to unhit?
    to map  s>f to mbh  s>f to mbw
    s>f y fs@ f+ to py  s>f x fs@ f+ to px
    r> is hit
    init ud lr
    \ unhit? if hit then
    nx px f- f>p x +!
    ny py f- f>p y +! ; DoNotSin

\ ------------------------------------------------------------------------------
\ Slide around corners (to be called in tmcol>'s body)
private

0e fvalue fudge  0e fvalue -fudge
: ?hcut+
    nx rwall? if mbw f+ then ny mbh f+ xypt
        dup BIT_WLT and 0<> vx @ 0> and
        swap BIT_WRT and 0<> vx @ 0< and or ?exit
    ny fudge f+ fgap fmod fudge f- fdup -fudge f>= 0e f< and -exit
    ny 0.5e f+ ny fgap f+ ftil fmin to ny ;
: ?hcut-
    nx rwall? if mbw f+ then ny xypt
        dup BIT_WLT and 0<> vx @ 0> and
        swap BIT_WRT and 0<> vx @ 0< and or ?exit    
    ny mbh f+ fudge f+ fgap fmod fudge f- fdup fudge f<= 0e f> and -exit
    ny mbh f+ 0.5e f- ny mbh f+ ftil fmax mbh f- to ny ;
: ?vcut+
    nx mbw f+ ny floor? if mbh f+ then xypt
        dup BIT_FLR and 0<> vy @ 0> and
        swap BIT_CEL and 0<> vy @ 0< and or ?exit
    nx fudge f+ fgap fmod fudge f- fdup -fudge f>= 0e f< and -exit
    nx 0.5e f+ nx fgap f+ ftil fmin to nx ;
: ?vcut-
    nx ny floor? if mbh f+ then xypt
        dup BIT_FLR and 0<> vy @ 0> and
        swap BIT_CEL and 0<> vy @ 0< and or ?exit
    nx mbw f+ fudge f+ fgap fmod fudge f- fdup fudge f<= 0e f> and -exit
    nx mbw f+ 0.5e f- nx mbw f+ ftil fmax mbw f- to nx ;

\ ------------------------------------------------------------------------------
public

: cut-corners ( n - )
    s>f to fudge  fudge fnegate to -fudge
    lwall? rwall? or if  ?hcut+ ?hcut-  then
    floor? ceiling? or if  ?vcut+ ?vcut-  then ;
