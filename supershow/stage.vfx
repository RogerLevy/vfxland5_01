\ ------------------------------------------------------------------------------
\ Stage - Actor System
\ ------------------------------------------------------------------------------

1024 ?constant #actors
#actors 8 * ?constant #temps
512 ?constant /actor

variable gamelife
0 0 2value gametime

trait: thinker trait;
thinker :: init ( - ) ;
thinker :: deinit ( - ) ;
thinker :: think ( - ) ;

class: actor
    is-a thinker
    /actor field-space
    prop en
    prop x prop y
    prop vx prop vy
    prop bmp
    prop x1 prop y1 prop w1 prop h1 \ hitbox 1
    prop beha
    prop time                       \ ms
    prop n1 prop n2 prop n3 prop n4 \ General purpose props
    prop phys
    prop prio                       \ 0 = behind BG, <>0 = in front of BG
    prop benched                    \ controls behavior and physics    
    prop id

    defaults [[ -1 id ! ]]
class;

trait: autoclass trait;

#actors actor object-array actors 
#temps actor object-array temps

\ =============================================================================
\ Actor Access Words
\ =============================================================================

: free? ( actor - f ) 's en @ 0= ;
: as> ( actor - <code> ; ) [[ r> execute ]] ;
: actor[] ( n - actor ) actors [] ;
: actor# ( actor - n ) 's id @ ;
: act> ( - ) ( - ) 0 time !  r> beha ! ; 
: act&> ( - ) ( - ) 0 time !  r@ execute  r> beha ! ; 
: physics> ( - ) ( - ) r> phys ! ;

: exists? ( actor - f )
    dup 0= if drop 0 exit then
    dup valid-object? if drop -1 exit then
    's en @ ;

validations @ validations off

: actives> ( - ) ( - )
    r> {: xt :}
    0 actor[] [[
    #actors for
        en @ if xt execute then
        /actor +to me
    loop
    ]] ; 

validations !

\ =============================================================================
\ Actor Serialization
\ =============================================================================

|| : .status ( - )
    benched @ if ." (BENCHED) " exit then
    en @ 0= if ." (FREE) " then ;

actor :: info ( actor - )
    11 push-attribute ." [ "
    me actor# dup 0 >= if ." #" . else drop me .name then
    cla @ .name
    .status
    ." at: " x 2@ 2p>s swap . . 
    ." ] " pop-attribute ;

: !" ( - <var>" )
    '"' parse 2dup 2>r
    f" %s ?" evaluate
    2r> fe" .\" %s ! \"" evaluate ; immediate

: p!" ( - <var>" )
    '"' parse 2dup 2>r
    f" %s p?" evaluate
    2r> fe" %p .\" %s ! \"" evaluate ; immediate

\ =============================================================================
\ Actor Errors
\ =============================================================================

: benched?  's benched @ ;
: bench  's benched on ; 
: ?benched  benched @ if r> drop then ;

: behave ( - )
    beha @ ?oexec ;

: !sp ( a - )
    \ Restore SP. If debug mode is on, report stack imbalances.
    debug @ if
        \ Compare SP to previous SP.
        \ The data stack grows downward.
        dup sp@ cell+ cell+ > if  
            s[ ." Positive stack imbalance in logic for actor " me info cr 
            s] log-warning .s
        then
        dup sp@ cell+ cell+ < if
            s[ ." Negative stack imbalance in logic for actor " me info cr
            s] log-warning .s
        then
    then
    sp! ;

|| : (behave) ( - )
    actives> ?benched sp@ >r behave r> !sp ;

: physics ( - )
    phys @ ?oexec ;

|| : (move) ( - )
    actives> ?benched physics ;

: +gametime ( - )
    gametime usdelta 0 d+ to gametime  1 gamelife +! ;

: +time ( - )
    ?benched pdelta time +! ;
    
|| : (+time) ( - )
    +gametime actives> +time ;

|| : (step) ( - )
    (behave) (move) (+time) ;

: step ( - )
    hold @ ?exit ['] (step) catch
    ?dup if
        hold on
        .throw-catch
    then ;

\ =============================================================================
\ Find actor
\ =============================================================================

|| 0 value xt

|| : (find) ( 0 actor - 0|actor f )
    to me
    en @ 0= ?dup ?exit
    xt execute if me swap else -1 then ;

: who> ( - actor ) ( - f )
    me >r
    r> to xt
    0 ['] (find) actors each
    r> to me ; 

\ =============================================================================
\ Actor drawing
\ =============================================================================

: ?pillory ( - )
    me benched? if
        12 color s" !" print
    then ;

: sprite ( - )
    x 2@ 2p>s at bmp @ cput ;

: backsprites ( - )
    batch> actives> prio @ ?exit sprite ?pillory ;

: sprites ( - )
    batch> actives> prio @ -exit sprite ?pillory ;

\ =============================================================================
\ Actor management
\ =============================================================================

variable next#

: floating ( - )
    physics> vx 2@ x 2+! ;

actor defaults [[
    en on
    prio on
    -5 -5 x1 2!  10 10 w1 2!
    floating
]]

: priority ( n - )
    0 #actors 1 - clamp next# ! ;

: unload ( - )
    en off  0 bmp !  0 beha !  0 phys ! ;

: just ( - )
    \ cr ." just >> All actors cleared!"
    0 next# !  actives>  unload ;

0 actor :construct ( - )
    at@ 2s>p x 2! ;

: (one) ( class - actor )
    {: c | saved-me :} 
    me to saved-me
    #actors for
        next# @ actor[] dup free? if
            c over construct
            next# @ over 's id !
            unloop exit
        then  drop
        next# @ 1 + #actors mod next# !
    loop  -1 abort" one : Out of actors." ;

: one ( class - actor )
    (one) dup init ;
    
: *actor ( - actor )
    actor one ;

actor object dummy 

\ =============================================================================
\ Object collisions
\ =============================================================================

: hitbox@ ( - x1 y1 x2 y2 )
    x 2@ 2p>s x1 2@ 2+  w1 2@ 2over 2+  1 1 2- ;
    
: hit? ( obj obj - f )
    over free? over free? or if 2drop 0 exit then
    >r [[ hitbox@ ]] r> [[ hitbox@ ]] overlap? ;

\ =============================================================================
\ Scripting utilities
\ =============================================================================

aka >. s>p
aka .> p>s

: att ( col row - ) gap dup 2*  gap 2 / dup 2+  at ;

: *[[ ( class - <code> ]] )
    \ Parse-ahead instantiation for serialized objects/actors
    \ Allows property settings between *[[ ]] that can be picked up by INIT
    s" (one) [[ " evaluate
    ']' parse evaluate  1 >in +!
    s" me init ]]" evaluate ; immediate

\ : in? ( - f ) x 2@ 2p>s 0 239 within >r 0 319 within r> and ;
\ : ?out ( - f ) in? not dup if unload then ;
: passed? ( n - f ) time @ <= dup if 0 time ! then ;
: from ( actor x y - ) rot as> x 2@ 2p>s 2+ at  ; \ me actor# priority ;
: halt  beha off  0 0 vx 2! ;
: morph ( class - )
    >r x 2@ vx 2@
    default me /actor move
    r> cla !
    vx 2! x 2! init ;

: out ( actor - )
    [[ unload ]] ;

: vanish  y @ 16384. or y ! ;
: appear  y @ 16384. invert and y ! ;
: expanded ( a1 n - a2 )
    swap dummy copy as>
        dup negate dup x1 2+! 2 * dup w1 2+!
        me ;
: hitbox! ( x y w h - ) w1 2! x1 2! ;
: freemove ( - )
    halt floating act>
        <left> held? if -2. x +! then
        <right> held? if 2. x +! then
        <up> held? if -2. y +! then
        <down> held? if 2. y +! then ;

\ =============================================================================
\ Timer actors
\ =============================================================================

|| synonym xt1 n2

class: timer
    actor derive 
class;

: clear-timers ( -- )
    actives> me timer is? -exit unload ;

|| : (timer) ( time. xt -- )
    xt1 ! n1 ! act> n1 @ passed? -exit unload xt1 @ execute ;

: timer> ( time. - ) ( - )
    r> timer one [[ (timer) ]] ;

\ =============================================================================
\ Secondary actor storage
\ =============================================================================

|| variable tnext#
: temp ( n - a ) temps [] ;
: *temp ( - a )
    #temps for
        tnext# @ temp dup free? if
            unloop exit
        then
        drop
        tnext# @ 1 + #temps mod tnext# !
    loop  -1 abort" Out of temps" ;

: temps> ( - ) ( - )
    r> #temps for
        i swap >r temp [[ r@ execute ]] r>
    loop drop ;

: clear-temps ( - )
    temps> unload ;

\ =============================================================================
\ Script Classes
\ =============================================================================

|| cstring classname$

: script-class ( parent-class - <name> )
    {: parent :}
    \ Create a script class with its own private vocabulary (if it doesn't already exist)
    only forth definitions
    bl parse f" class: %s" evaluate
    parent derive
    private
    defaults [[    \ allows both static and defaults assignments
;

: ?class;  classifier -exit class; ;
: include  include ?class; ;
: included  included ?class; ;
: require  require ?class; ;
: required  required ?class; ;

actor :: on-error ( xt err# - )
    {: xt err :} 
    err -exit
    me bench
    xt .name ." >> Actor threw an error - disabling "
    me ['] info catch drop cr
    .s
    err throw ;
    
: hide-autoclass ( a len - )
    >pad find if
        dup execute autoclass is? if
            \ Hide existing autoclass if any to fix LOCATE,
            \ which would otherwise take us to the call to LOAD-SCRIPTS
            \ in cases where we want to (re)define it within a script.
            >name hidename
        else drop then 
    else drop then ;

: actor-class ( - <name> )
    bl preparse hide-autoclass 
    actor script-class ;

: find-class ( a len - class | actor )
    >pad find if execute else drop actor then ;

