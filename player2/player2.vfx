include %idir%\aclient.vfx

16 request object-array player2-requests
player2-requests aclient object player2
cstring p2key$
cstring npc$

: game-client-id s" 01993e9f-bc67-7182-b044-4df0c82aa295" ;

: p2key-write ( a len - )
    @json s" p2Key" @field p2key$ place
    p2key$ count type cr ;

: init-player2 ( - request ) 
    player2 init
    game-client-id f" http://localhost:4315/v1/login/web/%s"
    player2 post>
        ['] p2key-write write-xt !
        s" " setfields
        me ;

: npc-create-write ( a len - )
    1 -2 2+ npc$ place
    npc$ count type cr ;

: npc-create ( payload len - request )
    s" https://api.player2.game/v1/npcs/spawn" 
    player2 post>
        0 
        p2key$ count f" Authorization: Bearer %s" >zpad curl_slist_append 
        z" Content-Type: application/json" curl_slist_append 
        \ z" User-Agent: MyApp/1.0" curl_slist_append 
        setheaders
        ( payload len ) setfields 
        ['] npc-create-write write-xt !
        me
;

: npc-send ( payload len npc len - )
    f" https://api.player2.game/v1/npcs/%s/chat" 
    player2 post>
        0 
        p2key$ count f" Authorization: Bearer %s" >zpad curl_slist_append 
        z" Content-Type: application/json" curl_slist_append 
        z" Accept: text/plain; charset=US-ASCII" curl_slist_append 
        setheaders
        ( payload len ) 
        setfields
;

variable on-response ( a len - )
create msg$$ 65536 allot&erase

: listen-write ( a len - )
    @json s" message" @field 2dup type cr msg$$ wplace ;

: listen ( - )
    begin
    s" https://api.player2.game/v1/npcs/responses" 
    player2 get>
        0 
        p2key$ count f" Authorization: Bearer %s" >zpad curl_slist_append 
        z" Accept: text/plain; charset=US-ASCII" curl_slist_append 
        setheaders
        streaming on 
        ['] listen-write write-xt !
        hist-dev op !
    on-complete>
    again
;

\ create wpayload 5000 allot
: npc-fields
    s[
        .\" {\"name\": \"Captain Blackbeard\","
        .\" \"short_name\": \"Captain\","
        .\" \"character_description\": \"A weathered pirate captain with a love for treasure and adventure\","
        .\" \"system_prompt\": \"You are Captain Blackbeard, speak like a pirate and help players find treasure\","
        .\" \"tts\": {"
        .\" \"voice_ids\": [\"01955d76-ed5b-753f-9f74-c0674216f0f5\"],"
        .\" \"speed\": 1.0,"
        .\" \"audio_format\": \"mp3\"}}"
    s] ;
\ gen-payload wpayload wplace

create gamestate$$ 5000 allot&erase

: chat ( msg len npc len - )
    s[
        .\" {\"sender_name\": \"Roger\","
        2swap ( npc len msg len ) fe" \"sender_message\": \"%s\"," type
        gamestate$$ wcount fe" \"game_state_info\": \"%s\"}" type
    s] 2swap npc-send ;
    
variable ctr
: ?health
    ctr @
    mstime 60000 / ctr !
    ctr @ <> -exit
    s" https://api.player2.game/v1/health" player2 get>
        ." Health!" cr
        0 
        p2key$ count f" Authorization: Bearer %s" >zpad curl_slist_append 
        setheaders ;

: ?parse
    msg$$ @ -exit
    on-response @ ?dup if msg$$ wcount rot execute then 
    msg$$ off ;

: process-chat  
    player2 process   ?health   ?parse ;

vocabulary commands

: (parse-response) ( a len - )
    only previous previous commands
    begin '|' scan dup while
        1 /string
        2dup \ remainder
        '|' cutoff evaluate
        '|' scan 1 /string
    repeat 
    2drop ;

: parse-response ( a len - )
    2>r get-order 2r>
    ['] (parse-response) catch ?dup if .throw nip nip then
    set-order ;


honing @ [if]

    : blocking
        begin process-chat 100 ms key? until ;

    : in-engineer
        show> process-chat ;

    : state: 0 parse gamestate$$ wplace ;
    : +state: s" \n" gamestate$$ wappend   0 parse gamestate$$ wappend ;
    : say: 0 parse npc$ count chat ;

    \ state: Player is at the bottom of a well and everybody thinks he is just the spirit of a deceased boy
    state: Player is on a beach.  
    +state: After responding, if the NPC chooses, they may issue one or system commands, separated by spaces.  Each command must be in the format `|command optional_param|`.  These commands will have a real effect in the game.  
    +state: IMPORTANT: Commands that are not listed are considered INVALID.  ONLY issue valid, listed commands. 
    +State: The following is the list of available system commands:  \n |npc-give-map| \n |npc-give-gold amount| \n |npc-steal-gold amount| \n |npc-give-sword| \n |npc-give-lamp| \n |npc-give-parrot name| \n |npc-draw-sword| \n |npc-flee|

    also commands definitions
    : npc-give-map   ." Got map" cr ;
    : npc-give-sword   ." Got sword" cr ;
    : npc-give-lamp   ." Got lamp" cr ;
    : npc-give-parrot   ." Got parrot named "  0 parse type cr ;
    : npc-give-gold  ." Got gold of amount "  0 parse evaluate . cr ;
    : npc-steal-gold  ." Lost gold of amount "  0 parse evaluate . cr ;
    : npc-flee  ." NPC ran away" cr ;
    : npc-draw-sword  ." NPC initiated battle" cr ;
    previous definitions


    s" Testing. |npc-give-map| |npc-give-gold 123| Testing. |npc-give-parrot Squawkbeak|" parse-response

    ['] parse-response on-response !

    : test
        CURL_GLOBAL_DEFAULT curl_global_init
        abort" curl_global_init failed"
        init-player2 as>
        on-complete> 
        listen 
        npc-fields npc-create as>
        on-complete>
        s" Hello." npc$ count chat ;

    going @ [if]
        test in-engineer
    [else]
        test blocking
    [then]
[then]