\ ------------------------------------------------------------------------------
\ Kevin Script
\ ------------------------------------------------------------------------------
require scripts\door.vfx
require scripts\crumble1.vfx
public

kevin.png 20 20 tileset kevin.ts
kevin.ts animation idle.anm    0 0   range,
kevin.ts animation squat.anm   1 10  range,
kevin.ts animation stand.anm   10 1  range,
kevin.ts animation ducking.anm 10 10 range,
kevin.ts animation blink.anm   11 12 range,
kevin.ts animation die.anm     13 28 range,
kevin.ts animation die.b.anm   28 28 range,
kevin.ts animation walk.anm    29 31 range,
kevin.ts animation jump.anm    36 36 range,
kevin.ts animation climb.anm   40 42 range, 40 h| 42 h| range,
kevin.ts animation hurtle.anm  39 frame, 32 frame, 39 hv| frame, 32 hv| frame, 

kevin-runover.png 180 20 tileset kevin-runover.ts
kevin-runover.ts animation kevin-runover1.anm 0 2 range,
kevin-runover.ts animation kevin-runover2.anm 3 12 range, 11 frame,

private

\ ------------------------------------------------------------------------------
\ more general stuff

: control-in-air
    <left> held? if  -0.1 vx +!  then
    <right> held? if  0.1 vx +!  then
    vx @ inertia @ p*  walkspeed @ dup negate swap clamp vx ! ;
: !flip  0 fac @ left = if h| then a.flp ! ;
: ?jump  <jump> pressed? -exit jump ;
: ?walk
    <left> pressed? if left walk exit then
    <right> pressed? if right walk exit then ;
: ?walk2
    <left> held? if left walk exit then
    <right> held? if right walk exit then
    idle ;
: ?walk3
    <left> held? if left walk exit then
    <right> held? if right walk exit then ;
: ?squat  <squat> held? -exit squat ;
: ?dirkey  fac @ left = if <left> else <right> then ;
: ?stick  ?dirkey held? not if vx 2@ .666 dup 2p* vx 2! then ;
: land  falling off  in-air off  ?walk2  ?stick ;
: ?crumble
    0 1 +tile@ trap? -exit
    0 1 colrow 2+ gap dup 2* at  gap 2 / dup +at  crumble1 one [[ ]] ;

variable was-hit
: roomcol
    was-hit off
    x1 2@ w1 2@ bg0 tmcol>
        was-hit on
        climbing @ not if
            \ unhit? vy @ 0 > and if fall exit then
            in-air @ if
                floor? if land exit then
            else
                floor? if ?crumble then
                lwall? if
                    <right> held? not if idle then
                then
                rwall? if
                    <left> held? not if idle then
                then
            then
        then ;

: roomcol2
    x1 2@ w1 2@ bg0 tmcol> ;
        
\ ------------------------------------------------------------------------------

class: kevin
    actor derive
    0.3 gravity !
    2.87 jumppower !
    0.245 risepower !
    1.64 walkspeed !
    0.98 inertia !
    3.5 terminal-vy !
class;


\ : ?plummet
\     y @ 240. >=
\     y @ 480. < and if  s" death" evaluate  then ;

\ ------------------------------------------------------------------------------
require scripts\flame2.vfx
private

: ?neg  fac @ left = if negate then ;

: use-lighter 
    s" enlighten" evaluate *zelda7*
    me 15 ?neg 0 from flame2% one [[ ]] ;
    
: ?use
    <use> pressed? -exit
        c" lighter" have if use-lighter then ;

private
: red-flash  5 for 0 0 at red.png put refresh loop ;
public

: ?spikes
    hp @ -exit falling @ -exit
    0 0 +tile@ 22 = -exit
    0 hp !
    red-flash
    y @ gap 2 / >. - gap >. mod gap >. swap - y +!
    halt float anm off 28 kevin.ts swap tile bmp !
    act> 3.0 passed? -exit
    s" death" evaluate ;

: physics
    ?use 
    climbing @ not if vy @ gravity @ + terminal-vy @ min vy ! then
    roomcol
    was-hit @ not climbing @ not and if
        vy @ 0 > falling @ not and if fall exit then
    then
    !flip  ( ?plummet ) ( ?travel ) ?spikes ;

: movelegs  vx @ abs 6 / 0.1 + 0.33 min a.spd ! ;
: ?walk.anm  anm @ walk.anm = ?exit  walk.anm 1. cycle  ;

: to-a-stop
    vx @ .825 p* vx !
    vx @ abs .15 <
    if   0 vx !  idle.anm 1. cycle   
    else ?walk.anm movelegs then ;

: walk-accel
    fac @ left = if
        vx @ -.15 + walkSpeed @ negate max vx !  
    else
        vx @ .15 + walkSpeed @ min vx !
    then
    movelegs ;

: ?-  vx @ 0< if negate then ;
: hop
    x @ gap >. ?- + n1 ! 2. ?- 0 vx 2! float  
    act>
        vx @ 0< if x @ n1 @ <= -exit
                else x @ n1 @ >= -exit then
        n1 @ x !
        ['] physics phys !  climb ;

: ?unclimb  0 0 +tile@ 27 = ?exit fall ;
: ?hop  +tile@ 27 = if hop else -2. vy ! then ;

kevin :: _climb
    falling off  climbing on  climb.anm 0 cycle  0 vx !
    x @ dup gap >. mod - gap >. 2 / + x !
    act>
        <up> held? <down> held? or if 1. 3 / else 0 then a.spd !
        <up> held? if -1. else
            <down> held? if 1. else
                0 then then vy !
        <left> held? if left fac ! then 
        <right> held? if right fac ! then
        ?jump ?unclimb
        <jump> pressed? if
            <left> held? if -1. vx ! -1 0 ?hop exit then
            <right> held? if 1. vx ! 1 0 ?hop exit then
            -2. vy !
        then ;
: ?jump  <jump> pressed? -exit !flip jump ;

: ?climb  <down> held? <up> held? or -exit  0 0 +tile@ 27 = -exit  climb ;

kevin :: _squat
    0 vx !  squat.anm 1. cycle  act>  a.done @ -exit
    ducking.anm 1. cycle  act>  <squat> held? ?exit
    stand.anm 1. cycle  act>  a.done @ -exit  ?walk2 ;

kevin :: _jump
    !flip  climbing off
    jump.anm 1. cycle jumppower @ negate vy !
    act>  
        vy @ 0<  <jump> held? and if 
            vy @ risepower @ negate + vy !  control-in-air
        else
            fall
        then
        ?climb ;

kevin :: _walk ( n - )
    climbing off
    fac !  walk.anm 1. cycle  
    act>
        ?dirkey letgo? if idle exit then
        ?walk
        walk-accel ?squat ?jump ?climb ;

kevin :: _idle
    climbing off
    vx @ 0= if idle.anm 1. cycle then
    act&>  to-a-stop ?walk3 ?squat ?jump ?climb ;

kevin :: _fall
    climbing off 
    jump.anm 1. cycle  act>  control-in-air  ?climb ;

\ kevin :: _die
\     climbing off
\     0 vx !  die.anm .1 cycle  act>  a.done @ -exit
\     die.b.anm 1. cycle  act>  1.5 passed? -exit  revive ;

\ ------------------------------------------------------------------------------

kevin-burn.png 40 40 tileset kevin-burn.ts
kevin-burn.ts animation burn.anm 0 1 range,

: ?fall
    fac @ left = if
        vx @ .001 + 0 max vx ! else
        vx @ -.001 + 0 min vx ! then
    vy @ 0.02 + 1. min vy ! ;
    
kevin :: burn
    hp @ -exit
    0 hp !
    s" dying" evaluate  \ disables some functions
    burn.anm .5 cycle
    halt float
    fac @ left = if  .5 -0.6 vx 2!  else  -.5 -0.6 vx 2!  then
    act> ?fall 0.5 passed? -exit  
    act> ?fall gamelife @ 1 and if bmp off then 1.0 passed? -exit
    act> ?fall gamelife @ 2 / 3 and if bmp off then 0.6 passed? -exit  vanish
    2.5 timer> s" death" evaluate ;

\ ------------------------------------------------------------------------------

: start  ['] physics phys !  ?walk2 ;

kevin :: init
    persist
    can-travel on
    100 hp !
    -6 -6 x1 2! 12 16 w1 2!
    right fac !  start ;

\ ------------------------------------------------------------------------------
private

variable fac2 \ saved direction facing
right fac2 !

: *coverup
    *actor dup [[ throwaway prio off 20x20black.png bmp ! ]] ;

: find-door  who> me door is? ;
: find-kevin  who> me kevin is? ;
    
\ ------------------------------------------------------------------------------
public

: ?kevin ( - actor )
    find-kevin ?dup ?exit
    start-xy 2@ at
    512 priority kevin% one to p1 0 priority
    p1 ;

: emerge ( - ) \ get kevin, find door, if it exists emerge from it
    ?kevin [[ !startxy ]]
    find-door ?dup -exit dup open
    -> x 2@ 13. 0 2+ p1 as>
        ['] roomcol2 phys !
        x 2!
        me 7 0 from  *coverup drop 0 priority
        left fac ! !flip  halt  prio off
        idle.anm 1. cycle  
        act&> 0.3 passed? -exit  -0.7 vx !
        act&> ?walk.anm movelegs
            0.25 passed? -exit  prio on  fac2 @ fac ! !flip start ;

private 0 value d public

: ?warp  ?dup 0= if start# then warp ;

prop dest

: enter ( - ) \ me = door, p1 = kevin
    ['] roomcol2 phys !
    me open  me to d
    x 2@ -2. 0 2+ p1 -> x 2!
    p1 as>
        fac @ fac2 !  right fac ! !flip  halt  float
        me 22 0 from  *coverup drop 0 priority
        idle.anm 1. cycle
        act> 0.1 passed? -exit  
        act> 0.05 vx +! ?walk.anm movelegs  0.2 passed? -exit prio off 
        act> 0.5 passed? -exit  halt
        act> 0.5 passed? -exit
            blank blank blank blank  d -> dest @ ?warp  emerge ;

: ?spawn-kevin  ?kevin drop ;

\ ------------------------------------------------------------------------------
private

: smear ( - )        
    hp @ -exit
    0 hp !
    halt float
    right fac ! !flip
    kevin-runover1.anm 0.5 cycle
    act> a.done @ -exit 
        kevin-runover2.anm 0.25 cycle
    act> a.done @ -exit
        0 a.spd !
    act> 3.0 passed? -exit
        s" death" evaluate ;

: bounce-physics
    vy @ gravity @ 2 / + terminal-vy @ min vy ! 
    !flip
    x1 2@ w1 2@ bg0 tmcol>
        in-air @ if
            floor? if land ['] physics phys ! exit then
        else
            lwall? if
                0 vx !
                <right> held? not if idle ['] physics phys ! then
            then
            rwall? if
                0 vx !
                <left> held? not if idle ['] physics phys ! then
            then
        then ;

: bounce ( - )
    hurtle.anm .5 cycle
    halt 2.5 -4. vx 2! ['] bounce-physics phys ! ;

: collide-camry
    hp @ -exit
    phys @ ['] bounce-physics = ?exit
    in-air @ if bounce else smear then ;

kevin :: collide ( other - )
    -> cla @ body> c" camry" named? if collide-camry then ;
