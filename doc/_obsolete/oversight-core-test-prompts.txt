# Core Forth Validations Test Prompts

Manual test cases for forth-contracts.vfx. Enter these into VFX Forth to verify validations work correctly.

## Notes

- Tests marked "Should throw" will abort with an error message
- Tests marked "Should warn" will show a warning but continue
- Tests marked "Should work" will execute normally without error
- Some tests may not work if the target words don't exist in your VFX system
- Game-specific tests require the game engine to be loaded
- Large allocation tests may actually allocate memory - use with caution on low-memory systems

## Setup
```forth
include engineer/debug/forth-contracts.vfx  \ Load validation system
```

## Memory Access Tests

### Address Validation Tests
```forth
0 @                     \ Should throw - null pointer access
0x90000000 @            \ Should throw - kernel space access  
here @                  \ Should work - valid address access
```

### Character Range Tests
```forth
65 here c!              \ Should work - valid ASCII 'A'
256 here c!             \ Should warn - character out of range
-1 here c!              \ Should warn - negative character
```

### Double Cell Tests  
```forth
0 2@                    \ Should throw - null pointer access
here 2@                 \ Should work - valid address
```

## Memory Arithmetic Tests

### Overflow Detection
```forth
1000000 cells           \ Should work - reasonable cell calculation
1000000000 cells        \ Should fail - potential overflow
```

## String Operation Tests

### Type Operation Tests
```forth
s" Hello World" type    \ Should work - valid string
0 10 type               \ Should throw - null pointer
here 100000 type       \ Should throw - excessive length
```

### Move Operation Tests
```forth
here dup cell+ 10 move  \ Should work - valid addresses and size
0 here 10 move          \ Should throw - null source address
here 0 10 move          \ Should throw - null destination address
here here 1000000000 move \ Should throw - excessive size
```

### Fill/Erase Tests
```forth
here 100 65 fill        \ Should work - fill with 'A'
here 100 erase          \ Should work - erase buffer
0 100 65 fill           \ Should throw - null address
here 1000000000 65 fill \ Should throw - excessive size
```

## Arithmetic Tests

### Star-Slash Tests
```forth
1000 2000 100 */        \ Should work - reasonable values
32000 32000 100 */      \ Should warn/fail - potential overflow
10 20 5 */mod           \ Should work - reasonable values
```

## File I/O Tests

### File Operation Tests
```forth
s" test.txt" r/o open-file drop  \ Should work - valid filename
s" " r/o open-file drop          \ Should throw - empty filename
0 10 r/o open-file drop          \ Should throw - null filename
```

### I/O Buffer Tests
```forth
here 1000 0 read-file drop drop     \ Should work - reasonable buffer
0 1000 0 read-file drop drop        \ Should throw - null buffer  
here 20000000 0 read-file drop drop \ Should warn - large buffer (>16MB)
here 300000000 0 read-file drop drop \ Should throw - excessive buffer (>256MB)
```

## Memory Management Tests

### Allocation Tests
```forth
1000 allocate drop      \ Should work - small allocation
20000000 allocate drop  \ Should warn - large allocation (>16MB)  
300000000 allocate drop \ Should throw - excessive allocation (>256MB)
0 allocate drop         \ Should throw - zero allocation
-100 allocate drop      \ Should throw - negative allocation
```

### Free Tests
```forth
1000 allocate throw dup free \ Should work - free allocated memory
0 free                       \ Should warn - free null pointer
```

## Execution Tests

### Execute Tests
```forth
' dup execute           \ Should work - valid XT
0 execute               \ Should throw - null XT
0x90000000 execute      \ Should throw - invalid XT
```

## Dictionary Tests

### Allot Tests
```forth
100 allot               \ Should work - reasonable allocation
20000000 allot          \ Should warn - large allocation  
-100 allot              \ Should work - negative allot (deallocate)
```

## Control Tests

### Enable/Disable Validations
```forth
safety ?           \ Show current validation status
safety off         \ Disable all validations
0 @                     \ Should NOT throw now - validations disabled
safety on          \ Re-enable validations
0 @                     \ Should throw again - validations enabled
```

### Validation Type Control
```forth
crucial safety on  \ Enable only crucial validations
charmful safety off \ Disable charmful validations
256 here c!             \ Should still warn - character validation is crucial
```

## Game-Specific Tests (if available)

### Array Access Tests (if [] exists)
```forth
10 cell array test-array \ Create test array (if available)
5 test-array []          \ Should work - valid index
-1 test-array []         \ Should throw - negative index  
20 test-array []         \ Should throw - index out of bounds
```

### Object Access Tests (if 's exists)
```forth
\ These tests depend on object system being available
\ 0 's field-name        \ Should throw - null object access
```

## Performance Tests

### Large Operation Warnings
```forth
here 18000000 erase     \ Should warn - large operation (>16MB)
25000000 allocate drop  \ Should warn - large allocation  
here 1000 erase         \ Should work silently - small operation
```

## Debug Output Tests

### Check Debug Messages
```forth
0 @                     \ Should show: "[ERROR] VALID-ADDRESS failed (throwing)"
256 here c!             \ Should show: "[WARN] VALID-CHAR failed (continuing)"
```

## Status and Statistics

### Check System Status
```forth
safety ?           \ Show validation flags status
#violations ?           \ Show total violations detected
```
