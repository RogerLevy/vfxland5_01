Asset System Design
==================

Overview
--------
A generalized system for managing different data types in VFXLand 5 games. The
system provides a unified way to register asset types and handle their loading,
saving, and updating.

Core Concept
------------
Replace scattered type-specific loading functions (like load-paths) with a
registration-based system where each data type declares its handlers once,
then the system uniformly manages all assets.

Asset Type Registration
-----------------------
Each asset type registers with the system by defining:

- Naming pattern: How objects are named in the dictionary (e.g. "%s.path")
- Class: What class to instantiate (e.g. path%)
- Loader: Function to deserialize from file
- Saver: Function to serialize to file  
- Updater: How to update existing dictionary objects
- Location: Directory where files are stored

Example:
asset-type: paths
    naming: f" %s.path"
    class: path%
    loader: load-path-file
    saver: save-path-file  
    updater: update-path-object
    location: "paths\"
asset-type;

Additional Properties to Consider
---------------------------------
- File extensions: What file types to scan (.vfx, .dat, .ogg)
- Dependencies: Asset types this depends on (for load ordering)
- Validation: Optional function to validate loaded assets
- Change detection: How to detect file modifications for live reloading
- Multi-file support: Assets spanning multiple files
- Error fallback: Default asset when loading fails
- Cleanup handler: Special disposal for resources

Implementation Strategy
-----------------------
Phase 1: Basic system with paths
- Implement core registry (naming, class, loader, saver, updater, location)
- Paths are self-contained, no dependencies needed
- Proves the concept without complexity

Phase 2: Dependency handling
- Add dependency declarations and topological sorting
- Needed for tilemaps (which reference tilesets/graphics)
- Options: load order resolution or lazy loading on first access

Phase 3: Multi-file assets  
- Support for assets spanning multiple files
- Needed for worlds (.dat + .scn pattern)
- Approaches: file patterns, compound loaders, or asset groups

Cleanup handling is lowest priority since games will be small enough that memory use and load time shouldn't be issues.

Preliminary API
---------------
Asset Type Registration:
asset-type: ( "name" - )          \ Begin asset type definition
    naming: ( "pattern" - )        \ Set naming pattern 
    class: ( class - )             \ Set object class
    loader: ( xt - )               \ Set file loader function
    saver: ( xt - )                \ Set file saver function
    updater: ( xt - )              \ Set object updater function
    location: ( "path" - )         \ Set file directory
    extensions: ( "ext1 ext2..." - ) \ Set valid file extensions
    depends: ( "type1 type2..." - ) \ Set dependency types
asset-type;                       \ Complete registration

Asset Management:
load-all-assets ( - )             \ Load all registered asset types
load-assets-of-type ( addr len - ) \ Load all assets of given registered type
load-asset ( addr len - obj )     \ Load specific asset type by name
save-asset ( obj addr len - )     \ Save asset object to file
create-asset ( addr:name len:name addr:type len:type - obj )
reload-asset ( addr:name len:name - )  \ Reload single asset
.assets/t ( addr:type len:type - )   \ List all assets of given type
.assets ( - )                     \ List all assets

Runtime Asset Operations:
asset-exists? ( addr:name len:name - flag )
asset-modified? ( addr:name len:name - flag ) \ Check file timestamp
asset-dependencies ( obj - addr len )  \ Get dependency list
validate-asset ( obj - flag )          \ Run validation if defined
cleanup-asset ( obj - )                \ Run cleanup handler
asset-info ( obj - addr len )          \ Get asset type name

Multi-file Support:
compound-loader: ( "pattern" - )   \ Begin multi-file loader definition
    file-handler: ( "ext" xt - )   \ Handler for each file extension
compound-loader;

Current Path Implementation
---------------------------
The existing load-paths approach will be implemented first, then the
generalized system developed, then paths adapted to use the new system. This
allows proving the path editor functionality while developing the asset
infrastructure in parallel.