2025/08/15
[x] (NIBS) Implement serialization support
    Add property-level serialization metadata and format-agnostic serialization system.
    Properties declare their serialization metadata (type, save flag) and global serializers
    walk properties to generate binary, XML, or other formats automatically.

2025/08/14
[ ] (NIBS) Implement trait inheritance
    Enable traits to derive from other traits using single inheritance.
    Supports cleaner separation of abstract concepts from concrete implementations.
    See doc/trait-inheritance-spec.md for full specification.
    [ ] Add trait derivation syntax and compiler support
    [ ] Runtime lineage validation for explicit parent calls (safety feature)

2025/08/11
[ ] Idea: Enhance :: to create psuedo-methods when the protocol doesn't exist.
    The purpose would be to make method-writing transparent.
    No more AS> or [[ ]] all the time.
    This would make things easier for both me and Claude.
    Ask Claude if this is a good idea or not.
    They would be plain functions.  Unless it would be better to make them 
    use the protocol system.  (But we'd run out of static space faster.)

[x] (NIBS) Update compact class syntax parser
    Every classifier token has distinguishing syntax now:
    %class - derive a class
    +trait - add a trait 
    "trait" - add a trait's capabilities only 
    
[x] (NIBS) Add CAN? capability checking word.
    Similar to IS? but checks for capability as opposed to identity.
    Accepts either traits or protocol XT's.

[-] (NIBS) Add protocol conflict protections
    [x] Track which trait added each protocol to a class using an extra
        static field per protocol.
    [x] In APPLY-TRAIT, if a trait tries to write to a protocol implementation
        XT that is already taken by another trait, throw an error.
    [x] If a class implements a protocol, assign the class to it in the extra
        static field.  Use this to determine whether to propagate a protocol
        in DEFINE-PROTOCOL.
    [ ] Implement "triggers" - special protocols that can be chained, allowing
        all implementations supported by a class to execute.
        (No parameters allowed.)
        `_asset trigger: init ( - ) ;`
    [ ] If needed, establish a standard way to alias conflicting trait protocols
        - Easy solution:
            Directly call them.  `_asset:init`  (assumes object is scoped)
        - More verbose solution:
            Create wrappers that take an object:
            `: asset-init ( _asset - ) [[ _asset:init ]] ;`

[x] (NIBS) Make :: syntax consistent with other NIBS words - allow classifier inference when inside classifier blocks.

[x] (NIBS) Rename 'S to ->

[ ] (NIBS) Add bracket matching validation for object binding operators `[[ ]]`.
    Check for missing opening or closing double brackets.

[x] (NIBS) Keep track of class protocols in their protocol list.
    Classes should maintain their protocol-list for introspection and debugging.

[ ] (NIBS) Add validations support for protocols.
    Verify protocol implementations match expected signatures and behaviors.

[ ] (NIBS) Experiment with dot syntax custom parser.
    Implement `object.member` notation as alternative to `object method`
    or `object 's property`.
    Look in old code for possibly pre-existing implementation.

[ ] Modify VFX Forth locals parser to handle buf[ ] patterns correctly.
    Currently creates locals named `buf[` instead of `buf`, making code less readable.

[ ] Make use of :DERIVE to replace ACTOR-CLASS and :EVENT.
    Use on-derive hooks to automatically set up actor and event-specific behavior
    without special syntax.
    [ ] Replace ACTOR-CLASS with standard class: syntax plus :DERIVE hook
    [ ] Replace :EVENT with standard class: syntax plus :DERIVE hook

[ ] Experimentally write a static asset analyzer.
    Implement bracket notation dependency discovery for automatic asset loading.
    Think through implications for interactive development and error reporting.

2025/08/08
[x] Investigate why editor isn't being opened on abort.

[x] Add trait:protocol identifier creation to (protocol:).
    Enable trait:protocol-name syntax for cleaner protocol references.

[x] Fix abort by setting AbortText.
    Currently aborting throws an exception due to the refactoring of system
    error handling

[ ] Consolidate .IP and .DATA into a single smart address-decoding word.
    Detect if address is colon word or data word and display appropriately.

2025/06/24
[x] Add `try`.
[x] Darkblue: add tweening module and perfect logo animation.
[x] Improve array defining syntax.
[ ] Integrate logging.
[x] Add debug intercept system.
[x] Improve the OOP system.