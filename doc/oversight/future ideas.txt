potential additional features:
- performance monitoring
- advanced contract behavior control
- array management helpers
- more metadata
- temporal validations
- 's! f's! - run validations on set field.
- alternatively, "hook into" `to` `+to` ... not a priority

is-in-bounds disable-validation
is-in-bounds enable-validation
disable-all-validations  \ what are these for???
enable-all-validations


\ validations start with their enabled flag ... so ....
is-in-bounds? s" pos!" preval off
is-in-bounds? s" pos!" postval on \ would throw an error but just an example

\ theoretical self-healing disable 
is-in-bounds? s" pos!" preval 's self-fix-enabled off  


\ ---- Behavior control flags

cell prop self-fixing?
cell prop debug-enabled?
\ cell prop monitoring     <--- TODO: performance monitoring flag

messages: ( contract% objects , contract-system singleton )
is-in-bounds? before pos! enable-self-fixing
contract-system disable-debugs


\ --- Runtime behavior

TODO:
Flags for things like "fail silently", "log but don't throw", "one-time
warnings only" - gives fine-grained control over how each validation behaves.
The new system's individual enabled flags (preval off/on) are already a form of
behavior flag. Expanding this to include self-healing, debug verbosity, and
other runtime behaviors makes sense for the level of control your artistic
workflow needs.


