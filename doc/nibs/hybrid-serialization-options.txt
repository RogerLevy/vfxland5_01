Hybrid Serialization Options
============================

Problem: Some assets need to serialize both themselves (with properties) and 
collections of other objects. For example, an inventory with capacity/stats 
plus an array of items.

Option 1: Concatenated Iterable
-------------------------------
Create a temporary iterable containing self followed by array contents.

    class: inventory
        is-a asset
        var capacity
        var items  \ Array of items
        
        :: serdes-src ( - iterable )
            \ Create temp array with self + all items
            temp[
                me ,                    \ Add self first
                items @ #items @ for   \ Add all items
                    items @ i [] @ ,
                loop
            temp] ;
    class;

Pros: Single iterable for sermulti
Cons: Mixing object types in one stream


Option 2: Tagged Serialization
------------------------------
Use type tags to distinguish between object and contents.

    :: save-params ( - )
        temp[
            'self serbin           \ Tag for self
            me serbin              \ Serialize self
            'items serbin          \ Tag for items  
            items @ [: true ;] ['] serbin sermulti
        temp] srcpath count write ;

    :: load-params ( - )
        srcpath count file@ >r
        r@ deserbin 'self = assert
        r@ ['] into-me deserbin drop    \ Deserialize into self
        r@ deserbin 'items = assert
        r@ ['] add-item ['] deserbin desermulti
        r> drop free throw ;

Pros: Self-documenting format, extensible
Cons: More complex implementation


Option 3: Nested Structure
-------------------------
Make collections part of the object's serialized state.

    class: inventory  
        is-a asset
        var capacity
        \ Items array is already serialized as part of self!
        100 array items   \ Fixed array serialized with object
        
        :: serdes-src ( - iterable )
            dummy-arr me swap [] !   \ Just serialize self
            dummy-arr ;              \ Array is included automatically
    class;

Pros: Simplest - array is just another property
Cons: Only works for fixed-size arrays


Recommendation
-------------
- Use Option 3 for fixed-size collections
- Use Option 2 for variable-size or complex cases
- Defer implementation until actually needed