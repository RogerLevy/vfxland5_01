Chuck in the Box: Assembly Line Recommendations

STAGE COMPLETION CRITERIA ENHANCEMENTS

Stage 1 (Problem Analysis)
- Current: All data structures and functions are documented with input/output specifications
- Add: All functions have clear responsibility boundaries and no function does more than 3 distinct operations

Stage 2 (Simplification)  
- Add: Deferred features list contains specific implementation notes, not just feature names

Stage 3 (Implementation)
- Add: Pseudocode compiles/runs conceptually - no undefined references or logical gaps

CONTEXT MANAGEMENT IMPROVEMENTS

Pre-Work Research Phase
Add explicit instruction to study 2-3 existing VFX files in the target domain before starting:
- Require documenting discovered patterns: "List 5 code patterns observed and how they'll be applied"
- Create domain-specific pattern library for reference during translation

FORTH EXPERTISE BOOTSTRAPPING (DETAILED)

Pre-Translation Research Phase
Before translating to Forth:

1. Read the target module's existing code to understand:
   - Variable naming patterns (brief vs descriptive)
   - Stack comment density and style  
   - Use of locals vs stack manipulation
   - Error handling approaches

2. Identify 3 comparable functions and document:
   - How they handle similar data structures
   - Their stack management style
   - Comment patterns and density
   - Integration with the OOP system

3. Create a "translation dictionary" mapping JavaScript concepts to VFX patterns found in the codebase

VFX-Specific Knowledge Loading
Study these project-specific elements:
- Stack conventions: Focus on the . (fixed-point) and $ (string) patterns
- OOP integration: How `me` context and `'s` property access work in practice
- Naming: Apply brevity rules (log not write-log-line)
- Locals usage: One {: :} block per definition, prefer descriptive names

ENHANCED LOOPBACK MECHANISMS

Cross-Stage Validation
- Stage 2→1: If simplification reveals the problem was misunderstood, loop back
- Stage 3→2: If pseudocode becomes complex, simplify further  
- Stage 6→3: If terminology is inconsistent, the pseudocode logic may be flawed

Knowledge Gap Triggers
- Any Stage→Research: If VFX/OOP patterns are unclear, pause for targeted codebase study
- Stack Check→Translation: If stack effects don't match function intent, the translation approach needs revision

Quality Gates with Metrics
- Stage 4: If translation produces >50 lines for a simple function, loop back to simplification
- Stage 5: If stack tracking reveals >3 stack items simultaneously, reconsider the approach
- Any Stage: If any stage takes more than 3 attempts, escalate to user with specific blocker description

ERROR RECOVERY ENHANCEMENTS

Escalation Triggers
- Complexity threshold: Functions exceeding reasonable size/complexity bounds
- Pattern mismatch: When generated code doesn't follow established project patterns
- Stack discipline failures: Repeated stack management errors

Recovery Strategies
- Targeted research: Study specific similar functions when stuck
- Incremental approach: Break complex translations into smaller pieces
- Pattern validation: Check each stage output against established project patterns

FAILURE MODE ANALYSIS

How Common Failure Modes Were Determined:

1. Inherent Language Mismatch Patterns:
- JavaScript → Forth is a major paradigm shift (object-oriented/garbage-collected → stack-based/manual memory)
- Stack overflow/underflow is the #1 Forth debugging issue
- Forth's extreme brevity often leads to cryptic, unmaintainable code when overdone

2. Project-Specific Constraints:
- The codebase shows careful stack management (locals usage, stack conventions doc)
- Heavy use of OOP system suggests complexity management is critical
- Naming conventions emphasize context-dependent brevity, which is easy to get wrong

3. Multi-Stage Pipeline Vulnerabilities:
- Scope creep: Each stage can accidentally expand requirements
- Context loss: Information gets lost between handoffs
- Compounding errors: Early mistakes amplify through the pipeline

4. LLM-Specific Issues Observed:
- Tendency to over-engineer simple problems
- Difficulty maintaining stack discipline across long code blocks
- Inconsistent application of domain-specific conventions

5. Existing Loopback Evidence:
Your prompt already identified "logic mistakes or unresolvable problems" as triggers - this indicated you've seen translation failures that require backtracking.

The specific metrics suggested (>50 lines, >3 stack items, 3 attempts) come from typical complexity thresholds where human-readable Forth starts breaking down. These are heuristics based on the "keep it simple" philosophy evident in your codebase's naming conventions and structure.

KEY PREVENTION STRATEGIES

1. Scope control: Explicit limits on feature expansion at each stage
2. Context preservation: Handoff checklists between stages
3. Pattern adherence: Regular validation against project conventions
4. Stack discipline: Continuous verification of stack effects