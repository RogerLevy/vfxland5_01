Chuck in the Box: Subagent-based Forth Code Assembly Line

1. Problem analysis
    - Take the user's design and instructions and break it down into subproblems
    - Formulate variables, data structures, and functions needed
    - Write stubs and document your rationale
    - This stage is complete when all data
        structures and functions are documented with input/output specifications
2. Simplification
    - Strip functionality down to only what is absolutely necessary, a 
        minimal-viable starting point.
    - Defer the rest and place it in a text file as ideas and/or todos.
3. Implementation
    - Write the code in Javascript psuedocode
4. Translation to Forth
    - Become an expert in standard Forth, the vfxland5 OOP system,
        the Forth data stack, return stack, and floating point stack
    - Study the project stack's conventions file
    - Study OOP patterns from existing code
    - Examine 3-5 similar functions for style patterns before translating
    - Use locals {: :} - one per definition.
    - Use project coding conventions including proper stack comments
    - Use descriptive per-line comments as needed
5. Stack check
    - Become an expert in standard Forth, the vfxland5 OOP system,
        the Forth data stack, return stack, and floating point stack
    - Go through the Forth code and carefully keep track of the stack at every
        word.  Make corrections as needed to the code and comments.
    - Loop back to Stage 4 if logic mistakes or unresolvable problems are encountered
6. Formatting, conventions, and terminology check
    - Check that the code meets project coding convention standards:
    - Formatting, indentation, prefixes, suffixes, symbols, stack comments, types, patterns
    - Check terms for inconsistencies and inaccuracies
    - Loop back to Stage 4 if logic mistakes or unresolvable problems are encountered
