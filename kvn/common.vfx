\ ------------------------------------------------------------------------------
\ Common game-specific definitions / config
\ Intended for common words but try to limit it to
\ stuff that's likely to be named the same across projects.
\ ------------------------------------------------------------------------------

<space> constant <jump>
<down> constant <squat>
<enter> constant <start>
<q> constant <use>
debug @ [if] <enter> [else] <esc> [then] constant <subscreen>
dummy value p1
create start-xy 160 , 120 , 
variable #deaths
var can-travel
create item$ 17 allot&erase 
0 0 2value gametime
variable clock  clock on
variable payment
variable godmode
variable mute
variable #secrets
variable can-save

\ Platforming
include platformer.vfx

\ Misc
: gevent
    2dup >pad find not if
        drop cr ." Global event not found: " type else execute then ;
: climbable?  $ff and 240 = ;

\ Global assets
bg.png 8 8 tileset bg.ts
bg.ts baseid@ pile !
s" gfx\bg.dat" bg.ts load-metas 

\ Inventory
dictionary inventory
: have ( $ - n )
    dup c@ 0= if drop 0 exit then
    inventory lookup @ ;
: get ( n $ - )  inventory lookup +! ;
: discard ( n $ - )  inventory lookup dup >r @ swap - 0 max r> ! ;
: divest ( - )  inventory walk> 0 swap ! drop ;
: earn  *beep2* c" money" get ;
: pay  payment +! ;
: instalment
    payment @ -exit
    \ gamelife @ 2 mod ?exit
    *beep8*
    10 payment @ min dup  c" money" discard  negate payment +! ;

\ Global events
: get-key  *beep5*  c" key" have 3 >= ?exit 1 c" key" get ;
: get-ring  *beep5*  c" ring" have 1 >= ?exit 1 c" ring" get ;
: get-heart  100 earn ;
: get-diamond  100 earn ;
: get-club  100 earn ;
: get-spade  10 earn ;
: get-note1  20 earn ;
: get-note2  40 earn ;
: get-beer  1000 earn *beep2* ;
: get-baby  1000000 earn *beep9* ;
: dying  can-save off can-travel off ;  \ disables saving and traveling
: slimed  s" death" gevent ;

\ Collectible mappings
: ?item ( n - a n )
    case
        3 of s" get-heart" endof
        4 of s" get-diamond" endof
        5 of s" get-club" endof
        6 of s" get-spade" endof
        9 of s" get-ring" endof
        11 of s" get-key" endof
        12 of s" get-baby" endof
        13 of s" get-note1" endof
        14 of s" get-note2" endof
        20 of s" get-beer" endof
        drop s" noop" 
    end-case ;

\ Movement between rooms
: !startxy  x 2@ 2p>s start-xy 2! ;
: travel ( x. y. n - )
    +warp x 2! !startxy
    blank s" game" gevent ;
: ?travel
    can-travel @ -exit
    p1 as>
        beha @ -exit
        x @ 320. >= if  4. y @ 1 travel  exit then
        x @ 0. <= if  316. y @ -1 travel  exit then
        y @ 240. >= if  x @ 4. 100 travel  exit then
        y @ 0. <= if  x @ 236. -100 travel  then ;

\ Status bar
|| : ?key  dup c" key" have <= if 11 emit else ." -" then 1 + ;
|| : ?ring c" ring" have if 9 emit else ." -" then ; 
|| : p.2  p>f 2 (f.) type space ;
|| : 2#.  0 <# # # #> type ;
|| : ?xy
    debug @ -exit
    +m
    200e 0e 0.5e 1e 0e transform
    0 0 at
    s[ p1 [[ x @ p.2 y @ p.2 ]] s] print
    -m
;
: hrs  gametime 360000000 m/ ;
: mins  gametime 60000000 m/ 60 mod ;
: secs  gametime 1000000 m/ 60 mod ;
variable money-flashing
: hud
    0 0 at
    s[ 320 8 / for space loop s] print  
    1 8 * 0 +at  bg.ts 245 tile put  1 8 * 0 +at 
    s[ ." :" room# ? s] print  6 8 * 0 +at 
    money-flashing @ gamelife @ 15 / 1 and and 0<>
    money-flashing @ 0= xor if
        s[ ." $" c" money" have 8 u.r s] print
    then 
    11 8 * 0 +at
    s[ 1 ?key ?key ?key drop ?ring s] print  \ 5 8 * 0 +at
    ?xy
    320 8 8 * - 0 at
    clock @ if
        s[ hrs 2#. ." :" mins 2#. ." :" secs 2#. s] print
    then
;

\ Audio
variable sfx
256 cell array importance
:noname ( smp - f )
    sfx @ over sfx @ <> and if
        sfx @ importance [] @ ` over importance [] @ > if
            sfx @ playing? if
                drop 0 exit 
            then
        then
    then
    hush  sfx !  -1 ;
is voice?

\ Sample priorities
2 beep5.ogg importance [] ! \ key
1 beep2.ogg importance [] ! \ collectible
9 beep3.ogg importance [] ! \ game over 
9 beep18.ogg importance [] ! \ death
1 beep8.ogg importance [] ! \ drop
9 beep9.ogg importance [] ! \ baby
3 beep10.ogg importance [] ! \ splat
2 beep11.ogg importance [] ! \ door
2 beep13.ogg importance [] ! \ fall
1 beep14.ogg importance [] ! \ jump
1 beep15.ogg importance [] ! \ drip
3 beep17.ogg importance [] ! \ secret

\ Generator
require scripts\slimedrop.vfx
|| variable col

|| : column
    swap col @ + 40 mod | c i |
    c i bg0 spot c@ case
        31 of ( *beep15* ) c i att slimedrop% *[[ ]] endof
    endcase ;

: generate
    mstime 500 / 40 mod col @ = ?exit
    mstime 500 / 40 mod col !
    30 1 do
        40 0 do i j column 5 +loop
    loop ;

\ Create secrets
require scripts\secret.vfx

: create-secrets
    tmh for
        tmw for
            i j bg0 spot c@ 22 = if
                i j att secret% *[[ ]]
                0 i j bg0 spot !
            then
        loop
    loop ;

load-room-chain link ' create-secrets ,
